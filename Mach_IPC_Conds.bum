<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.comment="* ***************************************************&#10;   The Event-B model of a verified partitioning kernel for safety-critical realtime systems&#10;   Created by Yongwang Zhao ( zhaoyongwang@gmail.com)&#10;   National Key Laboratory of Software Development Environment (NLSDE)&#10;   School of Computer and Engineering, Beihang University, Beijing, China&#10;   Date: 05/2014&#10;   *************************************************" org.eventb.core.configuration="org.eventb.core.fwd;de.prob.units.mchBase;org.eventb.codegen.ui.cgConfig" org.eventb.texttools.text_lastmodified="1409955183218" org.eventb.texttools.text_representation="machine Mach_IPC_Conds&#10;/* * ***************************************************&#10;   The Event-B model of a verified partitioning kernel for safety-critical realtime systems&#10;   Created by Yongwang Zhao ( zhaoyongwang@gmail.com)&#10;   National Key Laboratory of Software Development Environment (NLSDE)&#10;   School of Computer and Engineering, Beihang University, Beijing, China&#10;   Date: 05/2014&#10;   **************************************************/&#10; refines Mach_PartProc_Manage  sees Ctx_IPC&#10;&#10;variables processes processes_of_partition partition_mode process_state periodtype_of_process&#10;          process_wait_type // mainproc_of_partition // the only one main proc of each partition&#10;          locklevel_of_partition&#10;          /* denotes the current lock level of the partition&#10;             preemption_of_partitions */&#10;          startcondition_of_partition&#10;          /* denotes the reason the partition is started&#10;             schedulable_of_partition //the scheduling of a partition is activated or disactivated? */&#10;          basepriority_of_process // Denotes the capability of the process to manipulate other processes.&#10;          period_of_process // Identifies the period of activation for a periodic process. A distinct and unique value should be specified to designate the process as aperiodic&#10;          timecapacity_of_process // Defines the elapsed time within which the process should complete its execution.&#10;          deadline_of_process // Specifies the type of deadline relating to the process, and may be “hard” or “soft”.&#10;          currentpriority_of_process // Defines the priority with which the process may access and receive resources. It is set to base priority at initialization time and is dynamic at runtime.&#10;          deadlinetime_of_process // The deadline time is periodically evaluated by the operating system to determine whether the process is satisfactorily completing its processing within the allotted time.&#10;          releasepoint_of_process&#10;          /* the release point of processes&#10;             nextreleasepoint_of_process // the next release point of processes */&#10;          delaytime_of_process // if the proc is delayed started, the delaytime should be saved(used when parttion START --&gt; NORMAL)&#10;          current_partition // the partition in which a thread is now running. at each time, only one thread is running&#10;          current_process&#10;          current_partition_flag // true:indicate that the current_partition is valid, false: indicate NULL (unavailable)&#10;          current_process_flag // same as current partition flag&#10;          clock_tick // system clock ticks&#10;          need_reschedule // indicate the flag to reschedule after some events, for example suspend a thread&#10;          need_procresch&#10;          preempter_of_partition // the process who execute the lock_preemption (increase the locklevel and disable scheduling), at most one preempter proc in a partition&#10;          timeout_trigger // all processes waiting for resources with a timeout, will be triggered after the timeout ellapsed.&#10;          errorhandler_of_partition // each partition has one error handler at most. other error handler can be created only after the previous handler is finished&#10;          process_call_errorhandler&#10;          /* error handler is created by a process, then the process is preempted by the error handler&#10;             for inter-partition communication */&#10;          ports&#10;          /* the set of created ports&#10;             RefreshPeriod_of_SamplingPorts */&#10;          msgspace_of_samplingports&#10;          /* the only one msg space of sampling ports&#10;             needtrans_of_sourcesamplingport //indicate whether the msg in the source port has been transfered to dest ports? */&#10;          queue_of_queueingports // quediscipline_of_queueingports&#10;          processes_waitingfor_queuingports // for intra-partition communication&#10;          buffers blackboards semaphores events_ buffers_of_partition blackboards_of_partition semaphores_of_partition events_of_partition MaxMsgNum_of_Buffers queue_of_buffers&#10;          processes_waitingfor_buffers // quediscipline_of_buffers&#10;          msgspace_of_blackboards emptyindicator_of_blackboards processes_waitingfor_blackboards MaxValue_of_Semaphores&#10;          value_of_semaphores // quediscipline_of_semaphores&#10;          processes_waitingfor_semaphores state_of_events processes_waitingfor_events used_messages&#10;&#10;invariants&#10;  @inv_used_msgs used_messages ∈ ℙ(MESSAGES)&#10;  @inv_ports ports∈ℙ(PORTS) // @inv_refreshprd_of_sampports RefreshPeriod_of_SamplingPorts ∈ SamplingPorts ⇸ ℕ1//partial function, the value will be assigned when created&#10;  @inv_msgsp_sampport msgspace_of_samplingports∈SamplingPorts ⇸  (MESSAGES×ℕ1)&#10;  /* partial function, each samp port has only one size space, and the space is null before writing, N1 is the written time&#10;     @inv_writetime_sampport lastwritetime_of_samplingports ∈SamplingPorts→ℕ&#10;     @inv_flag_sourcesampport needtrans_of_sourcesamplingport ∈ SamplingPorts ⇸ BOOL&#10;     @inv_flag_means_msg ∀p·(p∈Source_SamplingPorts ⇒ (p∈dom(needtrans_of_sourcesamplingport) ∧ needtrans_of_sourcesamplingport(p) = TRUE ⇒ p∈dom(msgspace_of_samplingports)))&#10;     @inv_noflag_means_nomsg ∀p·(p∈Source_SamplingPorts ⇒ (p∈dom(needtrans_of_sourcesamplingport) ∧ needtrans_of_sourcesamplingport(p) = FALSE ⇒ p ∉ dom(msgspace_of_samplingports))) */&#10;  @inv_que_of_queports queue_of_queueingports∈QueuingPorts→ℙ(MESSAGES×ℕ1) // total function, each queport has a queue, although it is empty(so P, not P1). N1 is the written time&#10;  @inv_que_of_queports_finite ∀p·(p∈QueuingPorts ⇒ finite(queue_of_queueingports(p)))&#10;  /* @inv_quediscipline_of_queueingports quediscipline_of_queueingports∈QueuingPorts∩ports→QUEUING_DISCIPLINE   //partial function, the value will be assigned when created&#10;     @inv_quediscipline_of_queueingports2 dom(quediscipline_of_queueingports) */&#10;  @inv_processes_wf_qports processes_waitingfor_queuingports∈(processes×ℕ1×MESSAGES)⇸QueuingPorts // partial func: proc*(time of starting wait)*(msg of the wait proc to send)--&gt;port&#10;  @inv_maxnummsg_queports ∀p·(p∈QueuingPorts ⇒ (finite(queue_of_queueingports(p)) ∧ card(queue_of_queueingports(p)) ≤ MaxMsgNum_of_QueuingPorts(p)) )&#10;  @inv_buffers buffers∈ℙ(BUFFERS)&#10;  @inv_blackboards blackboards∈ℙ(BLACKBOARDS)&#10;  @inv_semaphores semaphores∈ℙ(SEMAPHORES)&#10;  @inv_events events_∈ℙ(EVENTS)&#10;  @inv_buf_part buffers_of_partition ∈ buffers  → PARTITIONS&#10;  @inv_blkb_part blackboards_of_partition ∈ blackboards  → PARTITIONS&#10;  @inv_evt_part events_of_partition ∈ events_  → PARTITIONS&#10;  @inv_semp_part semaphores_of_partition ∈ semaphores  → PARTITIONS&#10;  @inv_maxnummsg_of_buf MaxMsgNum_of_Buffers  ∈ buffers  → ℕ1 // @inv_quediscipline_of_buffers quediscipline_of_buffers∈buffers→QUEUING_DISCIPLINE&#10;  @inv_queofbuffers queue_of_buffers∈buffers→ℙ(MESSAGES×ℕ1) // total function&#10;  @inv_queofbuffers_finite ∀b·(b∈buffers⇒finite(queue_of_buffers(b)))&#10;  @inv_procswfbuf processes_waitingfor_buffers∈(processes × (BufferWaitingTypes×ℕ1)×MESSAGES)⇸buffers // partial func: proc*(waittype(send/rec)*(time of starting wait))*(msg of the wait proc to send)--&gt;buffer&#10;  @inv_maxnummsg_buffers ∀p·(p∈buffers ⇒ finite(queue_of_buffers(p)) ∧ card(queue_of_buffers(p)) ≤ MaxMsgNum_of_Buffers(p))&#10;  @inv_msgspace_blkb msgspace_of_blackboards∈blackboards ⇸ MESSAGES // partial func: the blackboard may be empty&#10;  @inv_emptyind_blkb emptyindicator_of_blackboards ∈ blackboards → BLACKBOARD_INDICATORTYPE&#10;  @inv_blkb_space_ind ∀b·(b∈blackboards⇒(emptyindicator_of_blackboards(b)=BB_OCCUPIED ⇔ b∈dom(msgspace_of_blackboards) ))&#10;  @inv_procswfblkb processes_waitingfor_blackboards∈processes⇸blackboards&#10;  /* partial func&#10;     @inv_quediscipline_of_semaphores quediscipline_of_semaphores∈semaphores→QUEUING_DISCIPLINE */&#10;  @inv_maxval_semp MaxValue_of_Semaphores ∈ semaphores  → ℕ1&#10;  @inv_val_semp value_of_semaphores ∈ semaphores → ℕ&#10;  @inv_procswfsemp processes_waitingfor_semaphores ∈ (processes×ℕ1)⇸semaphores // partial func: proc*(time of starting wait)--&gt;sem&#10;  @inv_procswfsemp_finite ∀s·(s∈semaphores⇒finite(processes_waitingfor_semaphores∼[{s}]))&#10;  @inv_maxvalue_semophare ∀p·(p∈semaphores ⇒ value_of_semaphores(p) ≤ MaxValue_of_Semaphores(p))&#10;  @inv_stateofevt state_of_events ∈ events_ → EVENT_STATE&#10;  @inv_procswfevts processes_waitingfor_events ∈ processes⇸events_ // partial func&#10;  @inv_processes_wf_qports_part ∀port·(port∈QueuingPorts ⇒ (∀p,t,m·(p↦t↦m∈processes_waitingfor_queuingports∼[{port}] ⇒ processes_of_partition(p)=Ports_of_Partition(port))))&#10;  /* @inv_procswfbuf_part ∀buf·(buf∈buffers ⇒ (∀p,tp,t,m·(p↦(tp↦t)↦m∈processes_waitingfor_buffers∼[{buf}] ⇒ processes_of_partition(p)=buffers_of_partition(buf))))&#10;     @inv_procswfblkb_part ∀bb·(bb∈blackboards ⇒ (∀p·(p∈processes_waitingfor_blackboards∼[{bb}] ⇒ processes_of_partition(p)=blackboards_of_partition(bb))) )&#10;     @inv_procstate_waitfor_semophare_part ∀sem·(sem∈semaphores ⇒ (∀p,t·(p↦t∈processes_waitingfor_semaphores∼[{sem}] ⇒ processes_of_partition(p)=semaphores_of_partition(sem))) )&#10;     @inv_procswfevts_part ∀ev·(ev∈events_ ⇒ (∀p·(p∈processes_waitingfor_events∼[{ev}] ⇒ processes_of_partition(p)=events_of_partition(ev))) ) */&#10;&#10;events&#10;  event INITIALISATION extends INITIALISATION&#10;    then&#10;      @act301 ports ≔ ∅ // @act302 RefreshPeriod_of_SamplingPorts ≔ ∅&#10;      @act303 msgspace_of_samplingports ≔  ∅ // @act304 needtrans_of_sourcesamplingport ≔  ∅&#10;      @act305 queue_of_queueingports ≔ QueuingPorts ×{∅} // @act306 quediscipline_of_queueingports ≔ ∅&#10;      @act307 processes_waitingfor_queuingports ≔ ∅&#10;      @act308 buffers ≔ ∅&#10;      @act309 blackboards ≔ ∅&#10;      @act310 semaphores ≔ ∅&#10;      @act311 events_ ≔ ∅&#10;      @act312 buffers_of_partition ≔ ∅&#10;      @act313 blackboards_of_partition ≔ ∅&#10;      @act314 semaphores_of_partition ≔ ∅&#10;      @act3150 events_of_partition ≔ ∅&#10;      @act315 MaxMsgNum_of_Buffers ≔ ∅&#10;      @act316 queue_of_buffers ≔ ∅&#10;      @act317 processes_waitingfor_buffers ≔ ∅ // @act318 quediscipline_of_buffers ≔ ∅&#10;      @act319 msgspace_of_blackboards ≔∅&#10;      @act320 emptyindicator_of_blackboards ≔ ∅&#10;      @act321 processes_waitingfor_blackboards ≔ ∅&#10;      @act322 MaxValue_of_Semaphores ≔ ∅&#10;      @act323 value_of_semaphores ≔ ∅ // @act324 quediscipline_of_semaphores ≔ ∅&#10;      @act325 processes_waitingfor_semaphores ≔ ∅&#10;      @act326 state_of_events ≔ ∅&#10;      @act327 processes_waitingfor_events ≔ ∅&#10;      @act328 used_messages ≔ ∅&#10;  end&#10;&#10;  event create_sampling_port&#10;    any port&#10;    where&#10;      @grd01 port∈SamplingPorts ∧ port∉ports&#10;    then&#10;      @act01 ports ≔ ports∪{port} // ports :∣ port∈ ports'&#10;  end&#10;&#10;  event write_sampling_message&#10;    any port msg&#10;    where&#10;      @grd01 port∈SamplingPorts&#10;      @grd03 Direction_of_Ports(port)=PORT_SOURCE&#10;      @grd02 msg∈MESSAGES ∧ msg∉used_messages // @grd03 t∈ℕ&#10;    then&#10;      @act01 msgspace_of_samplingports:∣∃t·(t∈ℕ ∧ port ↦ (msg↦t) ∈ msgspace_of_samplingports') // @act01 msgspace_of_samplingports(port) ≔ msg ↦  t //msgspace_of_samplingports:∣∃t·(t∈ℕ ∧ port ↦ (msg↦t) ∈ msgspace_of_samplingports')&#10;      @act02 used_messages ≔ used_messages  ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;  end&#10;&#10;  event read_sampling_message&#10;    any port m&#10;    where&#10;      @grd01 port∈SamplingPorts&#10;      @grd03 Direction_of_Ports(port)=PORT_DESTINATION&#10;      @grd02 port∈dom(msgspace_of_samplingports) ∧ (∃t·(t∈ℕ ∧ (m↦t)=msgspace_of_samplingports(port)))&#10;  end&#10;&#10;  event create_queuing_port&#10;    any port&#10;    where&#10;      @grd01 port∈QueuingPorts ∧ port ∉ports&#10;    then&#10;      @act01 ports ≔ ports∪{port} // ports :∣ port∈ ports'&#10;  end&#10;&#10;  event send_queuing_message&#10;    any port msg&#10;    where&#10;      @grd01 port∈ports&#10;      @grd02 port∈QueuingPorts&#10;      @grd03 Direction_of_Ports(port)=PORT_SOURCE&#10;      @grd04 msg∈MESSAGES ∧ msg∉used_messages&#10;      @grd05 card(queue_of_queueingports(port))&lt;MaxMsgNum_of_QueuingPorts(port) // there is sufficient space in the port’s message queue to accept the  message&#10;      @grd06 processes_waitingfor_queuingports∼[{port}] = ∅&#10;      /* no other process is waiting to send a message to that port&#10;         @grd07 t∈ℕ */&#10;    then&#10;      @act01 queue_of_queueingports:∣∃t·(t∈ℕ ∧ (msg↦t) ∈ queue_of_queueingports'(port)) // queue_of_queueingports(port) ≔ queue_of_queueingports(port) ∪ {msg↦t}//&#10;      @act02 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;  end&#10;&#10;  event send_queuing_message_needwait extends req_busy_resource&#10;    any port&#10;        msg // t&#10;&#10;    where&#10;      @grd51 port∈ports&#10;      @grd52 port∈QueuingPorts&#10;      @grd53 Direction_of_Ports(port)=PORT_SOURCE&#10;      @grd54 msg∈MESSAGES ∧ msg∉used_messages&#10;      @grd55 card(queue_of_queueingports(port))=MaxMsgNum_of_QueuingPorts(port) ∨ processes_waitingfor_queuingports∼[{port}] ≠ ∅ // @grd56 t∈ℕ&#10;    then&#10;      @act52 processes_waitingfor_queuingports :∣(∃t·(t∈ℕ ∧ (current_process↦t↦msg)↦port∈processes_waitingfor_queuingports')) // processes_waitingfor_queuingports ≔  processes_waitingfor_queuingports ∪ {(current_process↦t↦msg)↦port}//&#10;      @act55 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;  end&#10;&#10;  event wakeup_waitproc_on_srcqueports extends resource_become_available&#10;    any port&#10;        msg // t&#10;&#10;    where&#10;      @grd502 port ∈ Source_QueuingPorts ∧ port∈ports&#10;      @grd504 card(queue_of_queueingports(port)) &lt; MaxMsgNum_of_QueuingPorts(port)&#10;      @grd506 ∃t·(t∈ℕ ∧ (proc↦t↦ msg) ∈processes_waitingfor_queuingports∼[{port}]) // @grd507 t∈ℕ&#10;    then&#10;      @act501 processes_waitingfor_queuingports :∣ (¬∃t·(t∈ℕ ∧ ((proc↦t↦ msg)↦port)∈processes_waitingfor_queuingports') ) // processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports ∖ {(proc↦t↦ msg)↦port}//&#10;      @act506 queue_of_queueingports:∣(∃t·(t∈ℕ ∧ (msg↦t)∈queue_of_queueingports'(port) )) // queue_of_queueingports(port) ≔ queue_of_queueingports(port)∪{msg↦t}   //&#10;  end&#10;&#10;  event wakeup_waitproc_on_destqueports extends resource_become_available&#10;    any port&#10;        msg // t t1&#10;&#10;    where&#10;      @grd502 port ∈ Dest_QueuingPorts ∧ port∈ports&#10;      @grd504 card(queue_of_queueingports(port)) &gt; 0&#10;      @grd506 ∃t·(t∈ℕ ∧ (proc↦t↦ msg) ∈processes_waitingfor_queuingports∼[{port}]) // @grd507 t∈ℕ  ∧ t1∈ℕ&#10;    then&#10;      @act501 processes_waitingfor_queuingports :∣ (¬∃t·(t∈ℕ ∧ ((proc↦t↦ msg)↦port)∈processes_waitingfor_queuingports') ) // processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports ∖ {(proc↦t↦msg)↦port}//&#10;      @act506 queue_of_queueingports:∣(¬∃t·(t∈ℕ ∧(msg↦t)∈queue_of_queueingports'(port) )) // queue_of_queueingports(port) ≔ queue_of_queueingports(port)∖{msg ↦  t1}//&#10;  end&#10;&#10;  event receive_queuing_message&#10;    any port&#10;        msg // t&#10;&#10;    where&#10;      @grd01 port∈ports&#10;      @grd02 port∈QueuingPorts&#10;      @grd03 Direction_of_Ports(port)=PORT_DESTINATION&#10;      @grd04 msg∈MESSAGES&#10;      @grd06 card(queue_of_queueingports(port)) &gt; 0&#10;      @grd05 ∃t·(t∈ℕ ∧ (msg ↦t) ∈ queue_of_queueingports(port)) // @grd07 t∈ℕ&#10;    then&#10;      @act01 queue_of_queueingports:∣(¬∃t·(t∈ℕ ∧ (msg↦t) ∈queue_of_queueingports'(port))) // queue_of_queueingports(port) ≔ queue_of_queueingports(port) ∖ {msg↦t}//&#10;  end&#10;&#10;  event receive_queuing_message_needwait extends req_busy_resource&#10;    any port&#10;        msg // t&#10;&#10;    where&#10;      @grd502 port∈ports&#10;      @grd503 port∈QueuingPorts&#10;      @grd504 Direction_of_Ports(port)=PORT_DESTINATION&#10;      @grd505 card(queue_of_queueingports(port)) = 0&#10;      @grd506 msg∈MESSAGES // ∧ t∈ℕ&#10;    then&#10;      @act52 processes_waitingfor_queuingports :∣(∃t,m·(t∈ℕ ∧ m∈MESSAGES ∧ (current_process↦t↦m)↦port∈processes_waitingfor_queuingports')) // processes_waitingfor_queuingports ≔  processes_waitingfor_queuingports ∪ {(current_process↦t↦msg)↦port}//&#10;  end&#10;&#10;  event create_buffer&#10;    any buf max_msg_size&#10;    where&#10;      @grd00 buf∈BUFFERS ∧ buf∉buffers&#10;      @grd03 max_msg_size∈ℕ1&#10;    then&#10;      @act01 buffers ≔ buffers∪{buf} // buffers :∣ buf∈buffers'&#10;      @act02 MaxMsgNum_of_Buffers(buf)≔max_msg_size&#10;      @act05 queue_of_buffers(buf) ≔ ∅&#10;      @act04 buffers_of_partition(buf) ≔ current_partition&#10;  end&#10;&#10;  event send_buffer&#10;    any buf&#10;        msg // t&#10;&#10;    where&#10;      @grd01 buf ∈ buffers&#10;      @grd02 msg∈MESSAGES ∧ msg ∉ used_messages&#10;      @grd05 card(queue_of_buffers(buf))&lt;MaxMsgNum_of_Buffers(buf)&#10;      /* buffer is not full&#10;         @grd06 t∈ℕ */&#10;    then&#10;      @act01 queue_of_buffers:∣ ∃t·(t∈ℕ ∧ (msg↦t) ∈queue_of_buffers'(buf)) // queue_of_buffers(buf) ≔ queue_of_buffers(buf) ∪ {msg↦t}//&#10;      @act05 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;  end&#10;&#10;  event send_buffer_needwakeuprecvproc extends resource_become_available&#10;    any buf msg&#10;        m // t&#10;&#10;    where&#10;      @grd502 buf ∈ buffers&#10;      @grd503 msg∈MESSAGES ∧ msg ∉ used_messages&#10;      @grd504 card(queue_of_buffers(buf))&lt;MaxMsgNum_of_Buffers(buf) // buffer is not full&#10;      @grd505 card(processes_waitingfor_buffers∼[{buf}])&gt;0&#10;      @grd506 m∈MESSAGES // ∧ t∈ℕ&#10;    then&#10;      @act501 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;      @act502 processes_waitingfor_buffers:∣(¬∃t,m·(t∈ℕ ∧ m∈MESSAGES ∧ (proc↦(WAITING_R↦t)↦m)↦buf∈processes_waitingfor_buffers')) // processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∖ {(proc↦(WAITING_R↦t)↦m) ↦  buf}//&#10;  end&#10;&#10;  event send_buffer_withfull extends req_busy_resource&#10;    any buf&#10;        msg // t&#10;&#10;    where&#10;      @grd503 buf ∈ buffers&#10;      @grd502 msg∈MESSAGES ∧ msg ∉ used_messages&#10;      @grd505 card(queue_of_buffers(buf))=MaxMsgNum_of_Buffers(buf)&#10;      /* buffer is  full&#10;         @grd506 t∈ℕ */&#10;    then&#10;      @act501 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;      @act502 processes_waitingfor_buffers:∣(∃t·(t∈ℕ ∧ (current_process ↦ (WAITING_W↦t)↦msg)↦buf∈processes_waitingfor_buffers')) // processes_waitingfor_buffers ≔  processes_waitingfor_buffers ∪ {(current_process ↦ (WAITING_W↦t)↦msg)↦buf}//&#10;  end&#10;&#10;  event receive_buffer&#10;    any buf&#10;        msg // t&#10;&#10;    where&#10;      @grd01 buf ∈ buffers&#10;      @grd02 msg∈MESSAGES&#10;      @grd03 card(queue_of_buffers(buf))&gt;0&#10;      /* buffer is not empty&#10;         @grd04 t∈ℕ */&#10;    then&#10;      @act01 queue_of_buffers:∣(¬∃t·(t∈ℕ ∧ (msg↦t)∈queue_of_buffers'(buf))) // queue_of_buffers(buf) ≔ queue_of_buffers(buf) ∖ {msg↦t}//&#10;  end&#10;&#10;  event receive_buffer_needwakeupsendproc extends resource_become_available&#10;    any buf msg&#10;        m // t_&#10;&#10;    where&#10;      @grd506 buf ∈ buffers&#10;      @grd502 msg∈MESSAGES&#10;      @grd503 card(queue_of_buffers(buf))&gt;0 // buffer is not empty&#10;      @grd505 card(processes_waitingfor_buffers∼[{buf}])&gt;0&#10;      @grd507 m∈MESSAGES // ∧ t_∈ℕ&#10;    then&#10;      @act501 queue_of_buffers:∣(¬∃t·(t∈ℕ ∧  msg↦t∈queue_of_buffers'(buf))) // queue_of_buffers(buf) ≔ queue_of_buffers(buf)∪{m↦t_}//&#10;      @act502 processes_waitingfor_buffers:∣(¬∃t,m·(t∈ℕ ∧ m∈MESSAGES∧(proc↦(WAITING_W↦t)↦m)↦buf∈processes_waitingfor_buffers)) // processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∖ {(proc↦(WAITING_W↦t_)↦m) ↦  buf}//&#10;  end&#10;&#10;  event receive_buffer_whenempty extends req_busy_resource&#10;    any buf&#10;        msg // t&#10;&#10;    where&#10;      @grd504 buf ∈ buffers&#10;      @grd502 card(queue_of_buffers(buf))=0 // buffer is empty&#10;      @grd503 msg∈MESSAGES // @grd505 t∈ℕ&#10;    then&#10;      @act501 processes_waitingfor_buffers:∣(∃t,m·(t∈ℕ ∧m∈MESSAGES∧ (current_process ↦ (WAITING_R↦t)↦m)↦buf∈processes_waitingfor_buffers')) // processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∪ {(current_process ↦(WAITING_R↦t)↦msg) ↦ buf}//&#10;  end&#10;&#10;  event create_blackboard&#10;    any bb&#10;    where&#10;      @grd00 bb∈BLACKBOARDS ∧ bb∉blackboards&#10;    then&#10;      @act01 blackboards ≔ blackboards∪{bb} // blackboards:∣bb∈blackboards&#10;      @act04 emptyindicator_of_blackboards(bb)≔BB_EMPTY&#10;      @act03 blackboards_of_partition(bb)≔ current_partition&#10;  end&#10;&#10;  event display_blackboard&#10;    any bb msg&#10;    where&#10;      @grd00 bb∈blackboards&#10;      @grd02 msg∈MESSAGES ∧ msg∉used_messages&#10;      @grd03 processes_waitingfor_blackboards∼[{bb}] = ∅&#10;    then&#10;      @act01 msgspace_of_blackboards(bb) ≔ msg // msgspace_of_blackboards :∣ msgspace_of_blackboards'(bb) = msg&#10;      @act02 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;      @act03 emptyindicator_of_blackboards(bb) ≔ BB_OCCUPIED&#10;  end&#10;&#10;  event display_blackboard_needwakeuprdprocs extends resource_become_available2&#10;    any bb msg&#10;    where&#10;      @grd500 bb∈blackboards&#10;      @grd504 msg∈MESSAGES ∧ msg∉used_messages&#10;      @grd505 processes_waitingfor_blackboards∼[{bb}] ≠ ∅&#10;    then&#10;      @act501 msgspace_of_blackboards(bb) ≔ msg // msgspace_of_blackboards :∣ msgspace_of_blackboards'(bb) = msg&#10;      @act502 processes_waitingfor_blackboards ≔ procs⩤processes_waitingfor_blackboards // processes_waitingfor_blackboards :∣ ∀p·(p∈procs⇒p↦bb∉processes_waitingfor_blackboards')&#10;      @act504 used_messages ≔ used_messages ∪ {msg} // used_messages :∣ msg∈used_messages'&#10;      @act503 emptyindicator_of_blackboards(bb) ≔ BB_OCCUPIED&#10;  end&#10;&#10;  event read_blackboard&#10;    any bb msg&#10;    where&#10;      @grd00 bb∈blackboards&#10;      @grd02 msg∈MESSAGES&#10;      @grd03 emptyindicator_of_blackboards(bb) = BB_OCCUPIED&#10;  end&#10;&#10;  event read_blackboard_whenempty extends req_busy_resource&#10;    any bb&#10;    where&#10;      @grd500 bb∈blackboards&#10;      @grd502 emptyindicator_of_blackboards(bb) = BB_EMPTY&#10;    then&#10;      @act501 processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ∪ {current_process ↦ bb} // processes_waitingfor_blackboards:∣ current_process ↦ bb∈processes_waitingfor_blackboards'&#10;  end&#10;&#10;  event clear_blackboard&#10;    any bb&#10;    where&#10;      @grd00 bb∈blackboards&#10;    then&#10;      @act01 emptyindicator_of_blackboards(bb) ≔ BB_EMPTY&#10;  end&#10;&#10;  event create_semaphore&#10;    any sem maxval currentval&#10;    where&#10;      @grd01 sem∈SEMAPHORES ∧ sem∉semaphores&#10;      @grd07 maxval∈ℕ1&#10;      @grd08 currentval∈ℕ ∧ currentval≤maxval&#10;    then&#10;      @act01 semaphores ≔ semaphores∪{sem} // semaphores :∣ sem∈semaphores'&#10;      @act03 value_of_semaphores(sem)≔currentval&#10;      @act04 MaxValue_of_Semaphores(sem)≔maxval&#10;      @act05 semaphores_of_partition(sem) ≔current_partition&#10;  end&#10;&#10;  event wait_semaphore&#10;    any sem&#10;    where&#10;      @grd00 sem∈semaphores&#10;      @grd02 value_of_semaphores(sem) &gt; 0&#10;    then&#10;      @act01 value_of_semaphores(sem) ≔ value_of_semaphores(sem) −1&#10;  end&#10;&#10;  event wait_semahpore_whenzero extends req_busy_resource&#10;    any sem // t&#10;&#10;    where&#10;      @grd500 sem∈semaphores&#10;      @grd504 value_of_semaphores(sem) = 0 // @grd501 t∈ℕ&#10;    then&#10;      @act501 processes_waitingfor_semaphores :∣ (∃t·(t∈ℕ ∧ (current_process ↦ t)↦sem∈processes_waitingfor_semaphores')) // processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ∪ {(current_process ↦ t)↦ sem}//&#10;  end&#10;&#10;  event signal_semaphore&#10;    any sem&#10;    where&#10;      @grd00 sem∈semaphores&#10;      @grd02 value_of_semaphores(sem) ≠ MaxValue_of_Semaphores(sem)&#10;      @grd03 processes_waitingfor_semaphores∼[{sem}] = ∅&#10;    then&#10;      @act01 value_of_semaphores(sem) ≔ value_of_semaphores(sem) + 1&#10;  end&#10;&#10;  event signal_semaphore_needwakeupproc extends resource_become_available&#10;    any sem // t&#10;&#10;    where&#10;      @grd500 sem∈semaphores&#10;      @grd503 value_of_semaphores(sem) ≠ MaxValue_of_Semaphores(sem)&#10;      @grd506 card(processes_waitingfor_semaphores∼[{sem}])&gt;0 // @grd504 t∈ℕ&#10;    then&#10;      @act501 processes_waitingfor_semaphores :∣ (¬∃t·(t∈ℕ ∧  proc ↦ t↦sem∈processes_waitingfor_semaphores')) // processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ∖ {proc ↦ t↦sem}//&#10;  end&#10;&#10;  event create_event&#10;    any ev&#10;    where&#10;      @grd01 ev∈EVENTS ∧ ev ∉ events_&#10;    then&#10;      @act01 events_ ≔ events_∪{ev}&#10;      @act02 state_of_events(ev) ≔ EVENT_DOWN&#10;      @act03 events_of_partition(ev) ≔ current_partition&#10;  end&#10;&#10;  event set_event&#10;    any ev&#10;    where&#10;      @grd00 ev∈events_&#10;      @grd03 processes_waitingfor_events∼[{ev}] = ∅&#10;    then&#10;      @act01 state_of_events(ev)≔EVENT_UP&#10;  end&#10;&#10;  event set_event_needwakeupprocs extends resource_become_available2&#10;    any ev&#10;    where&#10;      @grd500 ev∈events_&#10;      @grd503 processes_waitingfor_events∼[{ev}] ≠ ∅&#10;    then&#10;      @act501 state_of_events(ev)≔EVENT_UP&#10;      @act503 processes_waitingfor_events ≔ procs⩤processes_waitingfor_events // processes_waitingfor_events :∣ ∀p·(p∈procs⇒p↦ev∉processes_waitingfor_events')&#10;  end&#10;&#10;  event reset_event&#10;    any ev&#10;    where&#10;      @grd00 ev∈events_&#10;    then&#10;      @act01 state_of_events(ev)≔EVENT_DOWN&#10;  end&#10;&#10;  event wait_event&#10;    any ev&#10;    where&#10;      @grd00 ev∈events_&#10;      @grd02 state_of_events(ev)=EVENT_UP&#10;  end&#10;&#10;  event wait_event_whendown extends req_busy_resource&#10;    any ev&#10;    where&#10;      @grd500 ev∈events_&#10;      @grd504 state_of_events(ev)=EVENT_DOWN&#10;    then&#10;      @act501 processes_waitingfor_events ≔ processes_waitingfor_events ∪ {current_process ↦ ev} // processes_waitingfor_events:∣ current_process ↦ ev ∈ processes_waitingfor_events'&#10;  end&#10;&#10;  event ticktock // timer interrupt event, triggered by the timer in hardware. one tick in each ONE_TICK_TIME&#10;  extends ticktock&#10;  end&#10;&#10;  event partition_schedule extends partition_schedule&#10;  end&#10;&#10;  event process_schedule // if there is not error handler and preempter in this partition&#10;  extends process_schedule&#10;  end&#10;&#10;  event run_errorhandler_preempter // if there is the error handler, it is executed, otherwise the preempter is executed&#10;  extends run_errorhandler_preempter&#10;  end&#10;&#10;  event get_partition_status extends get_partition_status&#10;  end&#10;&#10;  event set_partition_mode_to_idle // shutdown the partition&#10;  extends set_partition_mode_to_idle&#10;    then&#10;      @act501 ports ≔ ports∖Ports_of_Partition∼[{part}] // @act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts&#10;      @act503 msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports // @act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport&#10;      @act505 queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports // @act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports&#10;      @act507 processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]&#10;      @act508 buffers ≔ buffers∖buffers_of_partition∼[{part}]&#10;      @act509 blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]&#10;      @act510 semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]&#10;      @act511 events_ ≔ events_∖events_of_partition∼[{part}]&#10;      @act512 buffers_of_partition ≔ buffers_of_partition⩥{part}&#10;      @act513 blackboards_of_partition ≔ blackboards_of_partition⩥{part}&#10;      @act514 semaphores_of_partition ≔ semaphores_of_partition⩥{part}&#10;      @act515 events_of_partition ≔ events_of_partition⩥{part}&#10;      @act516 MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers&#10;      @act517 queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers&#10;      @act518 processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}] // @act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers&#10;      @act520 msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards&#10;      @act521 emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards&#10;      @act522 processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]&#10;      @act523 MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores&#10;      @act524 value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores // @act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores&#10;      @act526 processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]&#10;      @act527 state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events&#10;      @act528 processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]&#10;  end&#10;&#10;  event set_partition_mode_to_normal extends set_partition_mode_to_normal&#10;  end&#10;&#10;  event set_partition_mode_to_coldstart extends set_partition_mode_to_coldstart&#10;    then&#10;      @act501 ports ≔ ports∖Ports_of_Partition∼[{part}] // @act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts&#10;      @act503 msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports // @act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport&#10;      @act505 queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports // @act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports&#10;      @act507 processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]&#10;      @act508 buffers ≔ buffers∖buffers_of_partition∼[{part}]&#10;      @act509 blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]&#10;      @act510 semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]&#10;      @act511 events_ ≔ events_∖events_of_partition∼[{part}]&#10;      @act512 buffers_of_partition ≔ buffers_of_partition⩥{part}&#10;      @act513 blackboards_of_partition ≔ blackboards_of_partition⩥{part}&#10;      @act514 semaphores_of_partition ≔ semaphores_of_partition⩥{part}&#10;      @act515 events_of_partition ≔ events_of_partition⩥{part}&#10;      @act516 MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers&#10;      @act517 queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers&#10;      @act518 processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}] // @act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers&#10;      @act520 msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards&#10;      @act521 emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards&#10;      @act522 processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]&#10;      @act523 MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores&#10;      @act524 value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores // @act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores&#10;      @act526 processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]&#10;      @act527 state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events&#10;      @act528 processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]&#10;  end&#10;&#10;  event set_partition_mode_to_warmstart extends set_partition_mode_to_warmstart&#10;    then&#10;      @act501 ports ≔ ports∖Ports_of_Partition∼[{part}] // @act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts&#10;      @act503 msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports // @act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport&#10;      @act505 queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports // @act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports&#10;      @act507 processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]&#10;      @act508 buffers ≔ buffers∖buffers_of_partition∼[{part}]&#10;      @act509 blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]&#10;      @act510 semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]&#10;      @act511 events_ ≔ events_∖events_of_partition∼[{part}]&#10;      @act512 buffers_of_partition ≔ buffers_of_partition⩥{part}&#10;      @act513 blackboards_of_partition ≔ blackboards_of_partition⩥{part}&#10;      @act514 semaphores_of_partition ≔ semaphores_of_partition⩥{part}&#10;      @act515 events_of_partition ≔ events_of_partition⩥{part}&#10;      @act516 MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers&#10;      @act517 queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers&#10;      @act518 processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}] // @act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers&#10;      @act520 msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards&#10;      @act521 emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards&#10;      @act522 processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]&#10;      @act523 MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores&#10;      @act524 value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores // @act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores&#10;      @act526 processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]&#10;      @act527 state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events&#10;      @act528 processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]&#10;  end&#10;&#10;  event get_process_id extends get_process_id&#10;  end&#10;&#10;  event get_process_status extends get_process_status&#10;  end&#10;&#10;  event create_process extends create_process&#10;  end&#10;&#10;  event set_priority extends set_priority&#10;  end&#10;&#10;  event suspend_self&#10;  /* extends suspend_self&#10;     any timeout timeouttrig waittype */&#10;  extends suspend_self&#10;  end&#10;&#10;  event suspend // extends suspend&#10;  extends suspend&#10;  end&#10;&#10;  event resume // extends resume&#10;  extends resume&#10;  end&#10;&#10;  event stop_self extends stop_self&#10;  end&#10;&#10;  event stop extends stop&#10;    then&#10;      @act501 processes_waitingfor_queuingports :∣∀p,t,m,pt·((p↦t↦m)↦pt∈processes_waitingfor_queuingports ⇒ (p=proc⇒(p↦t↦m)↦pt∉processes_waitingfor_queuingports')∧(p≠proc⇒(p↦t↦m)↦pt∈processes_waitingfor_queuingports'))&#10;      @act502 processes_waitingfor_buffers :∣∀p,w,t,m,pt·((p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers ⇒ (p=proc⇒(p↦(w↦t)↦m)↦pt∉processes_waitingfor_buffers')∧(p≠proc⇒(p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers'))&#10;      @act503 processes_waitingfor_blackboards ≔ {proc}⩤processes_waitingfor_blackboards&#10;      @act504 processes_waitingfor_semaphores :∣∀p,t,pt·((p↦t)↦pt∈processes_waitingfor_semaphores ⇒ (p=proc⇒(p↦t)↦pt∉processes_waitingfor_semaphores')∧(p≠proc⇒(p↦t)↦pt∈processes_waitingfor_semaphores'))&#10;      @act505 processes_waitingfor_events ≔ {proc}⩤processes_waitingfor_events&#10;  end&#10;&#10;  event start_aperiodprocess_instart&#10;  /* start an aperiodic process in COLD_START or WARM_START mode&#10;     extends start */&#10;  extends start_aperiodprocess_instart&#10;  end&#10;&#10;  event start_aperiodprocess_innormal&#10;  /* start an aperiodic process in NORMAL mode&#10;     extends start */&#10;  extends start_aperiodprocess_innormal&#10;  end&#10;&#10;  event start_periodprocess_instart&#10;  /* start a periodic process in COLD_START or WARM_START mode&#10;     extends start */&#10;  extends start_periodprocess_instart&#10;  end&#10;&#10;  event start_periodprocess_innormal&#10;  /* start a periodic process in NORMAL mode&#10;     extends start */&#10;  extends start_periodprocess_innormal&#10;  end&#10;&#10;  event delaystart_aperiodprocess_instart // extends delayed_start&#10;  extends delaystart_aperiodprocess_instart&#10;  end&#10;&#10;  event delaystart_aperiodprocess_innormal&#10;  /* if delaytime=0, then immediately transit to READY, this is modelled in start_aperiod_process_whennormal&#10;     extends delayed_start&#10;     any delaytime */&#10;  extends delaystart_aperiodprocess_innormal&#10;  end&#10;&#10;  event delaystart_periodprocess_instart // extends delayed_start&#10;  extends delaystart_periodprocess_instart&#10;  end&#10;&#10;  event delaystart_periodprocess_innormal // extends delayed_start&#10;  extends delaystart_periodprocess_innormal&#10;  end&#10;&#10;  event lock_preemption extends lock_preemption&#10;  end&#10;&#10;  event unlock_preemption extends unlock_preemption&#10;  end&#10;&#10;  event get_my_id extends get_my_id&#10;  end&#10;&#10;  event timed_wait extends timed_wait&#10;  end&#10;&#10;  event period_wait extends period_wait&#10;  end&#10;&#10;  event get_time extends get_time&#10;  end&#10;&#10;  event replenish extends replenish&#10;  end&#10;&#10;  event aperiodicprocess_finished extends aperiodicprocess_finished&#10;  end&#10;&#10;  event periodicprocess_finished extends periodicprocess_finished&#10;  end&#10;&#10;  event time_out // should refined to support remove process on waiting queue of comm resources&#10;  extends time_out&#10;    then&#10;      @act501 processes_waitingfor_queuingports :∣∀p,t,m,pt·((p↦t↦m)↦pt∈processes_waitingfor_queuingports ⇒ (p=proc⇒(p↦t↦m)↦pt∉processes_waitingfor_queuingports')∧(p≠proc⇒(p↦t↦m)↦pt∈processes_waitingfor_queuingports'))&#10;      @act502 processes_waitingfor_buffers :∣∀p,w,t,m,pt·((p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers ⇒ (p=proc⇒(p↦(w↦t)↦m)↦pt∉processes_waitingfor_buffers')∧(p≠proc⇒(p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers'))&#10;      @act503 processes_waitingfor_blackboards ≔ {proc}⩤processes_waitingfor_blackboards&#10;      @act504 processes_waitingfor_semaphores :∣∀p,t,pt·((p↦t)↦pt∈processes_waitingfor_semaphores ⇒ (p=proc⇒(p↦t)↦pt∉processes_waitingfor_semaphores')∧(p≠proc⇒(p↦t)↦pt∈processes_waitingfor_semaphores'))&#10;      @act505 processes_waitingfor_events ≔ {proc}⩤processes_waitingfor_events&#10;  end&#10;&#10;  event periodicproc_reach_releasepoint extends periodicproc_reach_releasepoint&#10;  end&#10;&#10;  event coldstart_partition_fromidle extends coldstart_partition_fromidle&#10;  end&#10;&#10;  event warmstart_partition_fromidle extends warmstart_partition_fromidle&#10;  end&#10;end&#10;" version="5">
<org.eventb.core.refinesMachine name="_kB3EcPaqEeO0lIhp9r31mg" org.eventb.core.target="Mach_PartProc_Manage"/>
<org.eventb.core.seesContext name="_kB3EcfaqEeO0lIhp9r31mg" org.eventb.core.target="Ctx_IPC"/>
<org.eventb.core.variable name="_kB9LEPaqEeO0lIhp9r31mg" org.eventb.core.identifier="processes"/>
<org.eventb.core.variable name="_kB9LEfaqEeO0lIhp9r31mg" org.eventb.core.identifier="processes_of_partition"/>
<org.eventb.core.variable name="_kB9LEvaqEeO0lIhp9r31mg" org.eventb.core.identifier="partition_mode"/>
<org.eventb.core.variable name="_kB9LE_aqEeO0lIhp9r31mg" org.eventb.core.identifier="process_state"/>
<org.eventb.core.variable name="_kB9LFPaqEeO0lIhp9r31mg" org.eventb.core.identifier="periodtype_of_process"/>
<org.eventb.core.variable name="_kB9LFfaqEeO0lIhp9r31mg" org.eventb.core.comment="mainproc_of_partition // the only one main proc of each partition" org.eventb.core.identifier="process_wait_type"/>
<org.eventb.core.variable name="_kB9LFvaqEeO0lIhp9r31mg" org.eventb.core.comment="denotes the current lock level of the partition&#10;             preemption_of_partitions " org.eventb.core.identifier="locklevel_of_partition"/>
<org.eventb.core.variable name="_kB9LF_aqEeO0lIhp9r31mg" org.eventb.core.comment="denotes the reason the partition is started&#10;             schedulable_of_partition //the scheduling of a partition is activated or disactivated? " org.eventb.core.identifier="startcondition_of_partition"/>
<org.eventb.core.variable name="_kB9LGPaqEeO0lIhp9r31mg" org.eventb.core.comment="Denotes the capability of the process to manipulate other processes." org.eventb.core.identifier="basepriority_of_process"/>
<org.eventb.core.variable name="_kB9LGfaqEeO0lIhp9r31mg" org.eventb.core.comment="Identifies the period of activation for a periodic process. A distinct and unique value should be specified to designate the process as aperiodic" org.eventb.core.identifier="period_of_process"/>
<org.eventb.core.variable name="_kB9LGvaqEeO0lIhp9r31mg" org.eventb.core.comment="Defines the elapsed time within which the process should complete its execution." org.eventb.core.identifier="timecapacity_of_process"/>
<org.eventb.core.variable name="_kB9LG_aqEeO0lIhp9r31mg" org.eventb.core.comment="Specifies the type of deadline relating to the process, and may be “hard” or “soft”." org.eventb.core.identifier="deadline_of_process"/>
<org.eventb.core.variable name="_kB9LHPaqEeO0lIhp9r31mg" org.eventb.core.comment="Defines the priority with which the process may access and receive resources. It is set to base priority at initialization time and is dynamic at runtime." org.eventb.core.identifier="currentpriority_of_process"/>
<org.eventb.core.variable name="_kB9LHfaqEeO0lIhp9r31mg" org.eventb.core.comment="The deadline time is periodically evaluated by the operating system to determine whether the process is satisfactorily completing its processing within the allotted time." org.eventb.core.identifier="deadlinetime_of_process"/>
<org.eventb.core.variable name="_kB9LHvaqEeO0lIhp9r31mg" org.eventb.core.comment="the release point of processes&#10;             nextreleasepoint_of_process // the next release point of processes " org.eventb.core.identifier="releasepoint_of_process"/>
<org.eventb.core.variable name="_kB9LH_aqEeO0lIhp9r31mg" org.eventb.core.comment="if the proc is delayed started, the delaytime should be saved(used when parttion START --&gt; NORMAL)" org.eventb.core.identifier="delaytime_of_process"/>
<org.eventb.core.variable name="_kB9LIPaqEeO0lIhp9r31mg" org.eventb.core.comment="the partition in which a thread is now running. at each time, only one thread is running" org.eventb.core.identifier="current_partition"/>
<org.eventb.core.variable name="_kB9LIfaqEeO0lIhp9r31mg" org.eventb.core.identifier="current_process"/>
<org.eventb.core.variable name="_kB9LIvaqEeO0lIhp9r31mg" org.eventb.core.comment="true:indicate that the current_partition is valid, false: indicate NULL (unavailable)" org.eventb.core.identifier="current_partition_flag"/>
<org.eventb.core.variable name="_kB9LI_aqEeO0lIhp9r31mg" org.eventb.core.comment="same as current partition flag" org.eventb.core.identifier="current_process_flag"/>
<org.eventb.core.variable name="_kB9LJPaqEeO0lIhp9r31mg" org.eventb.core.comment="system clock ticks" org.eventb.core.identifier="clock_tick"/>
<org.eventb.core.variable name="_kB9LJfaqEeO0lIhp9r31mg" org.eventb.core.comment="indicate the flag to reschedule after some events, for example suspend a thread" org.eventb.core.identifier="need_reschedule"/>
<org.eventb.core.variable name="_0sUuIDVJEeSxw-wt7-_VGQ" org.eventb.core.identifier="need_procresch"/>
<org.eventb.core.variable name="_kB9LJvaqEeO0lIhp9r31mg" org.eventb.core.comment="the process who execute the lock_preemption (increase the locklevel and disable scheduling), at most one preempter proc in a partition" org.eventb.core.identifier="preempter_of_partition"/>
<org.eventb.core.variable name="_kB9LJ_aqEeO0lIhp9r31mg" org.eventb.core.comment="all processes waiting for resources with a timeout, will be triggered after the timeout ellapsed." org.eventb.core.identifier="timeout_trigger"/>
<org.eventb.core.variable name="_kB9LKPaqEeO0lIhp9r31mg" org.eventb.core.comment="each partition has one error handler at most. other error handler can be created only after the previous handler is finished" org.eventb.core.identifier="errorhandler_of_partition"/>
<org.eventb.core.variable name="_kB9LKfaqEeO0lIhp9r31mg" org.eventb.core.comment="error handler is created by a process, then the process is preempted by the error handler&#10;             for inter-partition communication " org.eventb.core.identifier="process_call_errorhandler"/>
<org.eventb.core.variable name="_kB9LKvaqEeO0lIhp9r31mg" org.eventb.core.comment="the set of created ports&#10;             RefreshPeriod_of_SamplingPorts " org.eventb.core.identifier="ports"/>
<org.eventb.core.variable name="_kB9LLPaqEeO0lIhp9r31mg" org.eventb.core.comment="the only one msg space of sampling ports&#10;             needtrans_of_sourcesamplingport //indicate whether the msg in the source port has been transfered to dest ports? " org.eventb.core.identifier="msgspace_of_samplingports"/>
<org.eventb.core.variable name="_kB9LLvaqEeO0lIhp9r31mg" org.eventb.core.comment="quediscipline_of_queueingports" org.eventb.core.identifier="queue_of_queueingports"/>
<org.eventb.core.variable name="_kB9LMPaqEeO0lIhp9r31mg" org.eventb.core.comment="for intra-partition communication" org.eventb.core.identifier="processes_waitingfor_queuingports"/>
<org.eventb.core.variable name="_kB9LMfaqEeO0lIhp9r31mg" org.eventb.core.identifier="buffers"/>
<org.eventb.core.variable name="_kB9LMvaqEeO0lIhp9r31mg" org.eventb.core.identifier="blackboards"/>
<org.eventb.core.variable name="_kCDRsPaqEeO0lIhp9r31mg" org.eventb.core.identifier="semaphores"/>
<org.eventb.core.variable name="_kCDRsfaqEeO0lIhp9r31mg" org.eventb.core.identifier="events_"/>
<org.eventb.core.variable name="_ZNjF4PniEeOsF7H-KIoPcA" org.eventb.core.identifier="buffers_of_partition"/>
<org.eventb.core.variable name="_ZNjF4fniEeOsF7H-KIoPcA" org.eventb.core.identifier="blackboards_of_partition"/>
<org.eventb.core.variable name="_ZNjF4vniEeOsF7H-KIoPcA" org.eventb.core.identifier="semaphores_of_partition"/>
<org.eventb.core.variable name="_ZNjF4_niEeOsF7H-KIoPcA" org.eventb.core.identifier="events_of_partition"/>
<org.eventb.core.variable name="__thJkPdiEeOkQpPDjalEqQ" org.eventb.core.identifier="MaxMsgNum_of_Buffers"/>
<org.eventb.core.variable name="_kCDRt_aqEeO0lIhp9r31mg" org.eventb.core.identifier="queue_of_buffers"/>
<org.eventb.core.variable name="_kCDRuPaqEeO0lIhp9r31mg" org.eventb.core.comment="quediscipline_of_buffers" org.eventb.core.identifier="processes_waitingfor_buffers"/>
<org.eventb.core.variable name="_kCDRuvaqEeO0lIhp9r31mg" org.eventb.core.identifier="msgspace_of_blackboards"/>
<org.eventb.core.variable name="_kCDRu_aqEeO0lIhp9r31mg" org.eventb.core.identifier="emptyindicator_of_blackboards"/>
<org.eventb.core.variable name="_kCDRvPaqEeO0lIhp9r31mg" org.eventb.core.identifier="processes_waitingfor_blackboards"/>
<org.eventb.core.variable name="__thJkfdiEeOkQpPDjalEqQ" org.eventb.core.identifier="MaxValue_of_Semaphores"/>
<org.eventb.core.variable name="_kCDRvvaqEeO0lIhp9r31mg" org.eventb.core.comment="quediscipline_of_semaphores" org.eventb.core.identifier="value_of_semaphores"/>
<org.eventb.core.variable name="_kCDRwPaqEeO0lIhp9r31mg" org.eventb.core.identifier="processes_waitingfor_semaphores"/>
<org.eventb.core.variable name="_kCDRwfaqEeO0lIhp9r31mg" org.eventb.core.identifier="state_of_events"/>
<org.eventb.core.variable name="_kCDRwvaqEeO0lIhp9r31mg" org.eventb.core.identifier="processes_waitingfor_events"/>
<org.eventb.core.variable name="_kCDRw_aqEeO0lIhp9r31mg" org.eventb.core.identifier="used_messages"/>
<org.eventb.core.invariant name="_kCDRxPaqEeO0lIhp9r31mg" org.eventb.core.label="inv_used_msgs" org.eventb.core.predicate="used_messages ∈ ℙ(MESSAGES)"/>
<org.eventb.core.invariant name="_kCDRxfaqEeO0lIhp9r31mg" org.eventb.core.comment="@inv_refreshprd_of_sampports RefreshPeriod_of_SamplingPorts ∈ SamplingPorts ⇸ ℕ1//partial function, the value will be assigned when created" org.eventb.core.label="inv_ports" org.eventb.core.predicate="ports∈ℙ(PORTS)"/>
<org.eventb.core.invariant name="_kCDRx_aqEeO0lIhp9r31mg" org.eventb.core.comment="partial function, each samp port has only one size space, and the space is null before writing, N1 is the written time&#10;     @inv_writetime_sampport lastwritetime_of_samplingports ∈SamplingPorts→ℕ&#10;     @inv_flag_sourcesampport needtrans_of_sourcesamplingport ∈ SamplingPorts ⇸ BOOL&#10;     @inv_flag_means_msg ∀p·(p∈Source_SamplingPorts ⇒ (p∈dom(needtrans_of_sourcesamplingport) ∧ needtrans_of_sourcesamplingport(p) = TRUE ⇒ p∈dom(msgspace_of_samplingports)))&#10;     @inv_noflag_means_nomsg ∀p·(p∈Source_SamplingPorts ⇒ (p∈dom(needtrans_of_sourcesamplingport) ∧ needtrans_of_sourcesamplingport(p) = FALSE ⇒ p ∉ dom(msgspace_of_samplingports))) " org.eventb.core.label="inv_msgsp_sampport" org.eventb.core.predicate="msgspace_of_samplingports∈SamplingPorts ⇸  (MESSAGES×ℕ1)"/>
<org.eventb.core.invariant name="_kCDRy_aqEeO0lIhp9r31mg" org.eventb.core.comment="total function, each queport has a queue, although it is empty(so P, not P1). N1 is the written time" org.eventb.core.label="inv_que_of_queports" org.eventb.core.predicate="queue_of_queueingports∈QueuingPorts→ℙ(MESSAGES×ℕ1)"/>
<org.eventb.core.invariant name="_kCDRzPaqEeO0lIhp9r31mg" org.eventb.core.comment="@inv_quediscipline_of_queueingports quediscipline_of_queueingports∈QueuingPorts∩ports→QUEUING_DISCIPLINE   //partial function, the value will be assigned when created&#10;     @inv_quediscipline_of_queueingports2 dom(quediscipline_of_queueingports) " org.eventb.core.label="inv_que_of_queports_finite" org.eventb.core.predicate="∀p·(p∈QueuingPorts ⇒ finite(queue_of_queueingports(p)))"/>
<org.eventb.core.invariant name="_kCDRzvaqEeO0lIhp9r31mg" org.eventb.core.comment="partial func: proc*(time of starting wait)*(msg of the wait proc to send)--&gt;port" org.eventb.core.label="inv_processes_wf_qports" org.eventb.core.predicate="processes_waitingfor_queuingports∈(processes×ℕ1×MESSAGES)⇸QueuingPorts"/>
<org.eventb.core.invariant name="_kCDR0PaqEeO0lIhp9r31mg" org.eventb.core.label="inv_maxnummsg_queports" org.eventb.core.predicate="∀p·(p∈QueuingPorts ⇒ (finite(queue_of_queueingports(p)) ∧ card(queue_of_queueingports(p)) ≤ MaxMsgNum_of_QueuingPorts(p)) )"/>
<org.eventb.core.invariant name="_kCDR0faqEeO0lIhp9r31mg" org.eventb.core.label="inv_buffers" org.eventb.core.predicate="buffers∈ℙ(BUFFERS)"/>
<org.eventb.core.invariant name="_kCDR0vaqEeO0lIhp9r31mg" org.eventb.core.label="inv_blackboards" org.eventb.core.predicate="blackboards∈ℙ(BLACKBOARDS)"/>
<org.eventb.core.invariant name="_kCJYUPaqEeO0lIhp9r31mg" org.eventb.core.label="inv_semaphores" org.eventb.core.predicate="semaphores∈ℙ(SEMAPHORES)"/>
<org.eventb.core.invariant name="_kCJYUfaqEeO0lIhp9r31mg" org.eventb.core.label="inv_events" org.eventb.core.predicate="events_∈ℙ(EVENTS)"/>
<org.eventb.core.invariant name="_ZNjF5PniEeOsF7H-KIoPcA" org.eventb.core.label="inv_buf_part" org.eventb.core.predicate="buffers_of_partition ∈ buffers  → PARTITIONS"/>
<org.eventb.core.invariant name="_ZNjF5fniEeOsF7H-KIoPcA" org.eventb.core.label="inv_blkb_part" org.eventb.core.predicate="blackboards_of_partition ∈ blackboards  → PARTITIONS"/>
<org.eventb.core.invariant name="_ZNjF5vniEeOsF7H-KIoPcA" org.eventb.core.label="inv_evt_part" org.eventb.core.predicate="events_of_partition ∈ events_  → PARTITIONS"/>
<org.eventb.core.invariant name="_ZNjF5_niEeOsF7H-KIoPcA" org.eventb.core.label="inv_semp_part" org.eventb.core.predicate="semaphores_of_partition ∈ semaphores  → PARTITIONS"/>
<org.eventb.core.invariant name="__thJkvdiEeOkQpPDjalEqQ" org.eventb.core.comment="@inv_quediscipline_of_buffers quediscipline_of_buffers∈buffers→QUEUING_DISCIPLINE" org.eventb.core.label="inv_maxnummsg_of_buf" org.eventb.core.predicate="MaxMsgNum_of_Buffers  ∈ buffers  → ℕ1"/>
<org.eventb.core.invariant name="_kCJYWPaqEeO0lIhp9r31mg" org.eventb.core.comment="total function" org.eventb.core.label="inv_queofbuffers" org.eventb.core.predicate="queue_of_buffers∈buffers→ℙ(MESSAGES×ℕ1)"/>
<org.eventb.core.invariant name="_kCJYWfaqEeO0lIhp9r31mg" org.eventb.core.label="inv_queofbuffers_finite" org.eventb.core.predicate="∀b·(b∈buffers⇒finite(queue_of_buffers(b)))"/>
<org.eventb.core.invariant name="_kCJYWvaqEeO0lIhp9r31mg" org.eventb.core.comment="partial func: proc*(waittype(send/rec)*(time of starting wait))*(msg of the wait proc to send)--&gt;buffer" org.eventb.core.label="inv_procswfbuf" org.eventb.core.predicate="processes_waitingfor_buffers∈(processes × (BufferWaitingTypes×ℕ1)×MESSAGES)⇸buffers"/>
<org.eventb.core.invariant name="__tqTgPdiEeOkQpPDjalEqQ" org.eventb.core.label="inv_maxnummsg_buffers" org.eventb.core.predicate="∀p·(p∈buffers ⇒ finite(queue_of_buffers(p)) ∧ card(queue_of_buffers(p)) ≤ MaxMsgNum_of_Buffers(p))"/>
<org.eventb.core.invariant name="_kCJYXfaqEeO0lIhp9r31mg" org.eventb.core.comment="partial func: the blackboard may be empty" org.eventb.core.label="inv_msgspace_blkb" org.eventb.core.predicate="msgspace_of_blackboards∈blackboards ⇸ MESSAGES"/>
<org.eventb.core.invariant name="_kCJYXvaqEeO0lIhp9r31mg" org.eventb.core.label="inv_emptyind_blkb" org.eventb.core.predicate="emptyindicator_of_blackboards ∈ blackboards → BLACKBOARD_INDICATORTYPE"/>
<org.eventb.core.invariant name="_kCJYX_aqEeO0lIhp9r31mg" org.eventb.core.label="inv_blkb_space_ind" org.eventb.core.predicate="∀b·(b∈blackboards⇒(emptyindicator_of_blackboards(b)=BB_OCCUPIED ⇔ b∈dom(msgspace_of_blackboards) ))"/>
<org.eventb.core.invariant name="_kCJYYPaqEeO0lIhp9r31mg" org.eventb.core.comment="partial func&#10;     @inv_quediscipline_of_semaphores quediscipline_of_semaphores∈semaphores→QUEUING_DISCIPLINE " org.eventb.core.label="inv_procswfblkb" org.eventb.core.predicate="processes_waitingfor_blackboards∈processes⇸blackboards"/>
<org.eventb.core.invariant name="__tqTgfdiEeOkQpPDjalEqQ" org.eventb.core.label="inv_maxval_semp" org.eventb.core.predicate="MaxValue_of_Semaphores ∈ semaphores  → ℕ1"/>
<org.eventb.core.invariant name="_kCJYZPaqEeO0lIhp9r31mg" org.eventb.core.label="inv_val_semp" org.eventb.core.predicate="value_of_semaphores ∈ semaphores → ℕ"/>
<org.eventb.core.invariant name="_kCJYZfaqEeO0lIhp9r31mg" org.eventb.core.comment="partial func: proc*(time of starting wait)--&gt;sem" org.eventb.core.label="inv_procswfsemp" org.eventb.core.predicate="processes_waitingfor_semaphores ∈ (processes×ℕ1)⇸semaphores"/>
<org.eventb.core.invariant name="_kCJYZvaqEeO0lIhp9r31mg" org.eventb.core.label="inv_procswfsemp_finite" org.eventb.core.predicate="∀s·(s∈semaphores⇒finite(processes_waitingfor_semaphores∼[{s}]))"/>
<org.eventb.core.invariant name="__tqTgvdiEeOkQpPDjalEqQ" org.eventb.core.label="inv_maxvalue_semophare" org.eventb.core.predicate="∀p·(p∈semaphores ⇒ value_of_semaphores(p) ≤ MaxValue_of_Semaphores(p))"/>
<org.eventb.core.invariant name="_kCPe8PaqEeO0lIhp9r31mg" org.eventb.core.label="inv_stateofevt" org.eventb.core.predicate="state_of_events ∈ events_ → EVENT_STATE"/>
<org.eventb.core.invariant name="_kCPe8faqEeO0lIhp9r31mg" org.eventb.core.comment="partial func" org.eventb.core.label="inv_procswfevts" org.eventb.core.predicate="processes_waitingfor_events ∈ processes⇸events_"/>
<org.eventb.core.invariant name="_kCPe8_aqEeO0lIhp9r31mg" org.eventb.core.comment="@inv_procswfbuf_part ∀buf·(buf∈buffers ⇒ (∀p,tp,t,m·(p↦(tp↦t)↦m∈processes_waitingfor_buffers∼[{buf}] ⇒ processes_of_partition(p)=buffers_of_partition(buf))))&#10;     @inv_procswfblkb_part ∀bb·(bb∈blackboards ⇒ (∀p·(p∈processes_waitingfor_blackboards∼[{bb}] ⇒ processes_of_partition(p)=blackboards_of_partition(bb))) )&#10;     @inv_procstate_waitfor_semophare_part ∀sem·(sem∈semaphores ⇒ (∀p,t·(p↦t∈processes_waitingfor_semaphores∼[{sem}] ⇒ processes_of_partition(p)=semaphores_of_partition(sem))) )&#10;     @inv_procswfevts_part ∀ev·(ev∈events_ ⇒ (∀p·(p∈processes_waitingfor_events∼[{ev}] ⇒ processes_of_partition(p)=events_of_partition(ev))) ) " org.eventb.core.label="inv_processes_wf_qports_part" org.eventb.core.predicate="∀port·(port∈QueuingPorts ⇒ (∀p,t,m·(p↦t↦m∈processes_waitingfor_queuingports∼[{port}] ⇒ processes_of_partition(p)=Ports_of_Partition(port))))"/>
<org.eventb.core.event name="_kCPe-PaqEeO0lIhp9r31mg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="INITIALISATION">
<org.eventb.core.action name="_kCPe-faqEeO0lIhp9r31mg" org.eventb.core.assignment="ports ≔ ∅" org.eventb.core.comment="@act302 RefreshPeriod_of_SamplingPorts ≔ ∅" org.eventb.core.label="act301"/>
<org.eventb.core.action name="_kCPe-_aqEeO0lIhp9r31mg" org.eventb.core.assignment="msgspace_of_samplingports ≔  ∅" org.eventb.core.comment="@act304 needtrans_of_sourcesamplingport ≔  ∅" org.eventb.core.label="act303"/>
<org.eventb.core.action name="_kCPe_faqEeO0lIhp9r31mg" org.eventb.core.assignment="queue_of_queueingports ≔ QueuingPorts ×{∅}" org.eventb.core.comment="@act306 quediscipline_of_queueingports ≔ ∅" org.eventb.core.label="act305"/>
<org.eventb.core.action name="_kCPe__aqEeO0lIhp9r31mg" org.eventb.core.assignment="processes_waitingfor_queuingports ≔ ∅" org.eventb.core.label="act307"/>
<org.eventb.core.action name="_kCPfAPaqEeO0lIhp9r31mg" org.eventb.core.assignment="buffers ≔ ∅" org.eventb.core.label="act308"/>
<org.eventb.core.action name="_kCPfAfaqEeO0lIhp9r31mg" org.eventb.core.assignment="blackboards ≔ ∅" org.eventb.core.label="act309"/>
<org.eventb.core.action name="_kCPfAvaqEeO0lIhp9r31mg" org.eventb.core.assignment="semaphores ≔ ∅" org.eventb.core.label="act310"/>
<org.eventb.core.action name="_kCPfA_aqEeO0lIhp9r31mg" org.eventb.core.assignment="events_ ≔ ∅" org.eventb.core.label="act311"/>
<org.eventb.core.action name="_ZNs24PniEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers_of_partition ≔ ∅" org.eventb.core.label="act312"/>
<org.eventb.core.action name="_ZNs24fniEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards_of_partition ≔ ∅" org.eventb.core.label="act313"/>
<org.eventb.core.action name="_ZNs24vniEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores_of_partition ≔ ∅" org.eventb.core.label="act314"/>
<org.eventb.core.action name="_ZNs24_niEeOsF7H-KIoPcA" org.eventb.core.assignment="events_of_partition ≔ ∅" org.eventb.core.label="act3150"/>
<org.eventb.core.action name="__tqTg_diEeOkQpPDjalEqQ" org.eventb.core.assignment="MaxMsgNum_of_Buffers ≔ ∅" org.eventb.core.label="act315"/>
<org.eventb.core.action name="_kCPfCfaqEeO0lIhp9r31mg" org.eventb.core.assignment="queue_of_buffers ≔ ∅" org.eventb.core.label="act316"/>
<org.eventb.core.action name="_kCPfCvaqEeO0lIhp9r31mg" org.eventb.core.assignment="processes_waitingfor_buffers ≔ ∅" org.eventb.core.comment="@act318 quediscipline_of_buffers ≔ ∅" org.eventb.core.label="act317"/>
<org.eventb.core.action name="_kCPfDPaqEeO0lIhp9r31mg" org.eventb.core.assignment="msgspace_of_blackboards ≔∅" org.eventb.core.label="act319"/>
<org.eventb.core.action name="_kCPfDfaqEeO0lIhp9r31mg" org.eventb.core.assignment="emptyindicator_of_blackboards ≔ ∅" org.eventb.core.label="act320"/>
<org.eventb.core.action name="_kCPfDvaqEeO0lIhp9r31mg" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ ∅" org.eventb.core.label="act321"/>
<org.eventb.core.action name="__tqThPdiEeOkQpPDjalEqQ" org.eventb.core.assignment="MaxValue_of_Semaphores ≔ ∅" org.eventb.core.label="act322"/>
<org.eventb.core.action name="_kCPfEPaqEeO0lIhp9r31mg" org.eventb.core.assignment="value_of_semaphores ≔ ∅" org.eventb.core.comment="@act324 quediscipline_of_semaphores ≔ ∅" org.eventb.core.label="act323"/>
<org.eventb.core.action name="_kCVlkfaqEeO0lIhp9r31mg" org.eventb.core.assignment="processes_waitingfor_semaphores ≔ ∅" org.eventb.core.label="act325"/>
<org.eventb.core.action name="_kCVlkvaqEeO0lIhp9r31mg" org.eventb.core.assignment="state_of_events ≔ ∅" org.eventb.core.label="act326"/>
<org.eventb.core.action name="_kCVlk_aqEeO0lIhp9r31mg" org.eventb.core.assignment="processes_waitingfor_events ≔ ∅" org.eventb.core.label="act327"/>
<org.eventb.core.action name="_kCVllPaqEeO0lIhp9r31mg" org.eventb.core.assignment="used_messages ≔ ∅" org.eventb.core.label="act328"/>
</org.eventb.core.event>
<org.eventb.core.event name="_kCVllfaqEeO0lIhp9r31mg" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_sampling_port">
<org.eventb.core.parameter name="_kCVllvaqEeO0lIhp9r31mg" org.eventb.core.identifier="port"/>
<org.eventb.core.guard name="_kCVlmPaqEeO0lIhp9r31mg" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈SamplingPorts ∧ port∉ports"/>
<org.eventb.core.action name="_kCVlnvaqEeO0lIhp9r31mg" org.eventb.core.assignment="ports ≔ ports∪{port}" org.eventb.core.comment="ports :∣ port∈ ports'" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_kCVloPaqEeO0lIhp9r31mg" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="write_sampling_message">
<org.eventb.core.parameter name="_kCVlofaqEeO0lIhp9r31mg" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_kCVlovaqEeO0lIhp9r31mg" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_kCVlo_aqEeO0lIhp9r31mg" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈SamplingPorts"/>
<org.eventb.core.guard name="_I49XMAdCEeSbLOdQCsVs6g" org.eventb.core.label="grd03" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_SOURCE"/>
<org.eventb.core.guard name="_kCVlpfaqEeO0lIhp9r31mg" org.eventb.core.comment="@grd03 t∈ℕ" org.eventb.core.label="grd02" org.eventb.core.predicate="msg∈MESSAGES ∧ msg∉used_messages"/>
<org.eventb.core.action name="__ghjkParEeO0lIhp9r31mg" org.eventb.core.assignment="msgspace_of_samplingports:∣∃t·(t∈ℕ ∧ port ↦ (msg↦t) ∈ msgspace_of_samplingports')" org.eventb.core.comment="@act01 msgspace_of_samplingports(port) ≔ msg ↦  t //msgspace_of_samplingports:∣∃t·(t∈ℕ ∧ port ↦ (msg↦t) ∈ msgspace_of_samplingports')" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_kCVlqPaqEeO0lIhp9r31mg" org.eventb.core.assignment="used_messages ≔ used_messages  ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act02"/>
</org.eventb.core.event>
<org.eventb.core.event name="_Yt7qYPawEeOUW8DjEYV7MQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="read_sampling_message">
<org.eventb.core.parameter name="_Yt7qYfawEeOUW8DjEYV7MQ" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_Yt7qYvawEeOUW8DjEYV7MQ" org.eventb.core.identifier="m"/>
<org.eventb.core.guard name="_Yt7qY_awEeOUW8DjEYV7MQ" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈SamplingPorts"/>
<org.eventb.core.guard name="_I5HIMAdCEeSbLOdQCsVs6g" org.eventb.core.label="grd03" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_DESTINATION"/>
<org.eventb.core.guard name="_Yt7qZPawEeOUW8DjEYV7MQ" org.eventb.core.label="grd02" org.eventb.core.predicate="port∈dom(msgspace_of_samplingports) ∧ (∃t·(t∈ℕ ∧ (m↦t)=msgspace_of_samplingports(port)))"/>
</org.eventb.core.event>
<org.eventb.core.event name="_iCK14PawEeOUW8DjEYV7MQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_queuing_port">
<org.eventb.core.parameter name="_iCK14fawEeOUW8DjEYV7MQ" org.eventb.core.identifier="port"/>
<org.eventb.core.guard name="_iCK14vawEeOUW8DjEYV7MQ" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈QueuingPorts ∧ port ∉ports"/>
<org.eventb.core.action name="_iCK14_awEeOUW8DjEYV7MQ" org.eventb.core.assignment="ports ≔ ports∪{port}" org.eventb.core.comment="ports :∣ port∈ ports'" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_Ers-cPbtEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="send_queuing_message">
<org.eventb.core.parameter name="_Ers-cfbtEeO4df-BGI_I2g" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_Ers-cvbtEeO4df-BGI_I2g" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_Ers-c_btEeO4df-BGI_I2g" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈ports"/>
<org.eventb.core.guard name="_Ers-dPbtEeO4df-BGI_I2g" org.eventb.core.label="grd02" org.eventb.core.predicate="port∈QueuingPorts"/>
<org.eventb.core.guard name="_I5HIMQdCEeSbLOdQCsVs6g" org.eventb.core.label="grd03" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_SOURCE"/>
<org.eventb.core.guard name="_Ers-dfbtEeO4df-BGI_I2g" org.eventb.core.label="grd04" org.eventb.core.predicate="msg∈MESSAGES ∧ msg∉used_messages"/>
<org.eventb.core.guard name="_Ers-dvbtEeO4df-BGI_I2g" org.eventb.core.comment="there is sufficient space in the port’s message queue to accept the  message" org.eventb.core.label="grd05" org.eventb.core.predicate="card(queue_of_queueingports(port))&lt;MaxMsgNum_of_QueuingPorts(port)"/>
<org.eventb.core.guard name="_Er2vcPbtEeO4df-BGI_I2g" org.eventb.core.comment="no other process is waiting to send a message to that port&#10;         @grd07 t∈ℕ " org.eventb.core.label="grd06" org.eventb.core.predicate="processes_waitingfor_queuingports∼[{port}] = ∅"/>
<org.eventb.core.action name="_Er2vcfbtEeO4df-BGI_I2g" org.eventb.core.assignment="queue_of_queueingports:∣∃t·(t∈ℕ ∧ (msg↦t) ∈ queue_of_queueingports'(port))" org.eventb.core.comment="queue_of_queueingports(port) ≔ queue_of_queueingports(port) ∪ {msg↦t}//" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_Er2vcvbtEeO4df-BGI_I2g" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act02"/>
</org.eventb.core.event>
<org.eventb.core.event name="_Er2vc_btEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="send_queuing_message_needwait">
<org.eventb.core.refinesEvent name="_Er2vdPbtEeO4df-BGI_I2g" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_Er2vdfbtEeO4df-BGI_I2g" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_Er2vdvbtEeO4df-BGI_I2g" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_Er2vd_btEeO4df-BGI_I2g" org.eventb.core.label="grd51" org.eventb.core.predicate="port∈ports"/>
<org.eventb.core.guard name="_Er2vePbtEeO4df-BGI_I2g" org.eventb.core.label="grd52" org.eventb.core.predicate="port∈QueuingPorts"/>
<org.eventb.core.guard name="_I5HIMgdCEeSbLOdQCsVs6g" org.eventb.core.label="grd53" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_SOURCE"/>
<org.eventb.core.guard name="_Er2vefbtEeO4df-BGI_I2g" org.eventb.core.label="grd54" org.eventb.core.predicate="msg∈MESSAGES ∧ msg∉used_messages"/>
<org.eventb.core.guard name="_Er2vevbtEeO4df-BGI_I2g" org.eventb.core.comment="@grd56 t∈ℕ" org.eventb.core.label="grd55" org.eventb.core.predicate="card(queue_of_queueingports(port))=MaxMsgNum_of_QueuingPorts(port) ∨ processes_waitingfor_queuingports∼[{port}] ≠ ∅"/>
<org.eventb.core.action name="_InlC4PdVEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_queuingports :∣(∃t·(t∈ℕ ∧ (current_process↦t↦msg)↦port∈processes_waitingfor_queuingports'))" org.eventb.core.comment="processes_waitingfor_queuingports ≔  processes_waitingfor_queuingports ∪ {(current_process↦t↦msg)↦port}//" org.eventb.core.label="act52"/>
<org.eventb.core.action name="_Er2ve_btEeO4df-BGI_I2g" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act55"/>
</org.eventb.core.event>
<org.eventb.core.event name="_AFfvMPgoEeOdqO0geQOt0A" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="wakeup_waitproc_on_srcqueports">
<org.eventb.core.refinesEvent name="_AFfvMfgoEeOdqO0geQOt0A" org.eventb.core.target="resource_become_available"/>
<org.eventb.core.parameter name="_AFfvMvgoEeOdqO0geQOt0A" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_AFfvM_goEeOdqO0geQOt0A" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_AFfvNPgoEeOdqO0geQOt0A" org.eventb.core.label="grd502" org.eventb.core.predicate="port ∈ Source_QueuingPorts ∧ port∈ports"/>
<org.eventb.core.guard name="_AFfvNfgoEeOdqO0geQOt0A" org.eventb.core.label="grd504" org.eventb.core.predicate="card(queue_of_queueingports(port)) &lt; MaxMsgNum_of_QueuingPorts(port)"/>
<org.eventb.core.guard name="_AFfvNvgoEeOdqO0geQOt0A" org.eventb.core.comment="@grd507 t∈ℕ" org.eventb.core.label="grd506" org.eventb.core.predicate="∃t·(t∈ℕ ∧ (proc↦t↦ msg) ∈processes_waitingfor_queuingports∼[{port}])"/>
<org.eventb.core.action name="_AFfvN_goEeOdqO0geQOt0A" org.eventb.core.assignment="processes_waitingfor_queuingports :∣ (¬∃t·(t∈ℕ ∧ ((proc↦t↦ msg)↦port)∈processes_waitingfor_queuingports') )" org.eventb.core.comment="processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports ∖ {(proc↦t↦ msg)↦port}//" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_AFfvOPgoEeOdqO0geQOt0A" org.eventb.core.assignment="queue_of_queueingports:∣(∃t·(t∈ℕ ∧ (msg↦t)∈queue_of_queueingports'(port) ))" org.eventb.core.comment="queue_of_queueingports(port) ≔ queue_of_queueingports(port)∪{msg↦t}   //" org.eventb.core.label="act506"/>
</org.eventb.core.event>
<org.eventb.core.event name="_AFfvOfgoEeOdqO0geQOt0A" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="wakeup_waitproc_on_destqueports">
<org.eventb.core.refinesEvent name="_AFfvOvgoEeOdqO0geQOt0A" org.eventb.core.target="resource_become_available"/>
<org.eventb.core.parameter name="_AFfvO_goEeOdqO0geQOt0A" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_AFfvPPgoEeOdqO0geQOt0A" org.eventb.core.comment="t t1" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_AFfvQPgoEeOdqO0geQOt0A" org.eventb.core.label="grd502" org.eventb.core.predicate="port ∈ Dest_QueuingPorts ∧ port∈ports"/>
<org.eventb.core.guard name="_AFfvQfgoEeOdqO0geQOt0A" org.eventb.core.label="grd504" org.eventb.core.predicate="card(queue_of_queueingports(port)) &gt; 0"/>
<org.eventb.core.guard name="_AFfvQvgoEeOdqO0geQOt0A" org.eventb.core.comment="@grd507 t∈ℕ  ∧ t1∈ℕ" org.eventb.core.label="grd506" org.eventb.core.predicate="∃t·(t∈ℕ ∧ (proc↦t↦ msg) ∈processes_waitingfor_queuingports∼[{port}])"/>
<org.eventb.core.action name="_AFfvRvgoEeOdqO0geQOt0A" org.eventb.core.assignment="processes_waitingfor_queuingports :∣ (¬∃t·(t∈ℕ ∧ ((proc↦t↦ msg)↦port)∈processes_waitingfor_queuingports') )" org.eventb.core.comment="processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports ∖ {(proc↦t↦msg)↦port}//" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_6wvbkPgoEeOdqO0geQOt0A" org.eventb.core.assignment="queue_of_queueingports:∣(¬∃t·(t∈ℕ ∧(msg↦t)∈queue_of_queueingports'(port) ))" org.eventb.core.comment="queue_of_queueingports(port) ≔ queue_of_queueingports(port)∖{msg ↦  t1}//" org.eventb.core.label="act506"/>
</org.eventb.core.event>
<org.eventb.core.event name="_Er2vfPbtEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="receive_queuing_message">
<org.eventb.core.parameter name="_Er2vffbtEeO4df-BGI_I2g" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_Er2vfvbtEeO4df-BGI_I2g" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_Er2vf_btEeO4df-BGI_I2g" org.eventb.core.label="grd01" org.eventb.core.predicate="port∈ports"/>
<org.eventb.core.guard name="_Er2vgPbtEeO4df-BGI_I2g" org.eventb.core.label="grd02" org.eventb.core.predicate="port∈QueuingPorts"/>
<org.eventb.core.guard name="_I5Q5MAdCEeSbLOdQCsVs6g" org.eventb.core.label="grd03" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_DESTINATION"/>
<org.eventb.core.guard name="_Er2vgfbtEeO4df-BGI_I2g" org.eventb.core.label="grd04" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.guard name="_Er2vgvbtEeO4df-BGI_I2g" org.eventb.core.label="grd06" org.eventb.core.predicate="card(queue_of_queueingports(port)) &gt; 0"/>
<org.eventb.core.guard name="_Er2vg_btEeO4df-BGI_I2g" org.eventb.core.comment="@grd07 t∈ℕ" org.eventb.core.label="grd05" org.eventb.core.predicate="∃t·(t∈ℕ ∧ (msg ↦t) ∈ queue_of_queueingports(port))"/>
<org.eventb.core.action name="_Er2vhPbtEeO4df-BGI_I2g" org.eventb.core.assignment="queue_of_queueingports:∣(¬∃t·(t∈ℕ ∧ (msg↦t) ∈queue_of_queueingports'(port)))" org.eventb.core.comment="queue_of_queueingports(port) ≔ queue_of_queueingports(port) ∖ {msg↦t}//" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_yi6XoPbtEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="receive_queuing_message_needwait">
<org.eventb.core.refinesEvent name="_yi6XofbtEeO4df-BGI_I2g" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_yi6XovbtEeO4df-BGI_I2g" org.eventb.core.identifier="port"/>
<org.eventb.core.parameter name="_V8OdsPmjEeOThpOAvRBLhQ" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_yi6XpPbtEeO4df-BGI_I2g" org.eventb.core.label="grd502" org.eventb.core.predicate="port∈ports"/>
<org.eventb.core.guard name="_yi6XpfbtEeO4df-BGI_I2g" org.eventb.core.label="grd503" org.eventb.core.predicate="port∈QueuingPorts"/>
<org.eventb.core.guard name="_I5Q5MQdCEeSbLOdQCsVs6g" org.eventb.core.label="grd504" org.eventb.core.predicate="Direction_of_Ports(port)=PORT_DESTINATION"/>
<org.eventb.core.guard name="_yi6XpvbtEeO4df-BGI_I2g" org.eventb.core.label="grd505" org.eventb.core.predicate="card(queue_of_queueingports(port)) = 0"/>
<org.eventb.core.guard name="_S0xPdvmhEeOThpOAvRBLhQ" org.eventb.core.comment="∧ t∈ℕ" org.eventb.core.label="grd506" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.action name="_InlC4fdVEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_queuingports :∣(∃t,m·(t∈ℕ ∧ m∈MESSAGES ∧ (current_process↦t↦m)↦port∈processes_waitingfor_queuingports'))" org.eventb.core.comment="processes_waitingfor_queuingports ≔  processes_waitingfor_queuingports ∪ {(current_process↦t↦msg)↦port}//" org.eventb.core.label="act52"/>
</org.eventb.core.event>
<org.eventb.core.event name="_yi6XqPbtEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_buffer">
<org.eventb.core.parameter name="_yi6XqfbtEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_qvD9MPdjEeOkQpPDjalEqQ" org.eventb.core.identifier="max_msg_size"/>
<org.eventb.core.guard name="_yi6XqvbtEeO4df-BGI_I2g" org.eventb.core.label="grd00" org.eventb.core.predicate="buf∈BUFFERS ∧ buf∉buffers"/>
<org.eventb.core.guard name="_qvD9MfdjEeOkQpPDjalEqQ" org.eventb.core.label="grd03" org.eventb.core.predicate="max_msg_size∈ℕ1"/>
<org.eventb.core.action name="_yi6Xq_btEeO4df-BGI_I2g" org.eventb.core.assignment="buffers ≔ buffers∪{buf}" org.eventb.core.comment="buffers :∣ buf∈buffers'" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_qvD9MvdjEeOkQpPDjalEqQ" org.eventb.core.assignment="MaxMsgNum_of_Buffers(buf)≔max_msg_size" org.eventb.core.label="act02"/>
<org.eventb.core.action name="_qvD9M_djEeOkQpPDjalEqQ" org.eventb.core.assignment="queue_of_buffers(buf) ≔ ∅" org.eventb.core.label="act05"/>
<org.eventb.core.action name="_ZN2A0PniEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers_of_partition(buf) ≔ current_partition" org.eventb.core.label="act04"/>
</org.eventb.core.event>
<org.eventb.core.event name="_yi6XrPbtEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="send_buffer">
<org.eventb.core.parameter name="_yi6XrfbtEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_yi6XrvbtEeO4df-BGI_I2g" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_yi6Xr_btEeO4df-BGI_I2g" org.eventb.core.label="grd01" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_yi6XsPbtEeO4df-BGI_I2g" org.eventb.core.label="grd02" org.eventb.core.predicate="msg∈MESSAGES ∧ msg ∉ used_messages"/>
<org.eventb.core.guard name="_yi6XsfbtEeO4df-BGI_I2g" org.eventb.core.comment="buffer is not full&#10;         @grd06 t∈ℕ " org.eventb.core.label="grd05" org.eventb.core.predicate="card(queue_of_buffers(buf))&lt;MaxMsgNum_of_Buffers(buf)"/>
<org.eventb.core.action name="_yi6XsvbtEeO4df-BGI_I2g" org.eventb.core.assignment="queue_of_buffers:∣ ∃t·(t∈ℕ ∧ (msg↦t) ∈queue_of_buffers'(buf))" org.eventb.core.comment="queue_of_buffers(buf) ≔ queue_of_buffers(buf) ∪ {msg↦t}//" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_yi6Xs_btEeO4df-BGI_I2g" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act05"/>
</org.eventb.core.event>
<org.eventb.core.event name="_PYW48PbuEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="send_buffer_needwakeuprecvproc">
<org.eventb.core.refinesEvent name="_PYW48fbuEeO4df-BGI_I2g" org.eventb.core.target="resource_become_available"/>
<org.eventb.core.parameter name="_PYW48vbuEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_PYW48_buEeO4df-BGI_I2g" org.eventb.core.identifier="msg"/>
<org.eventb.core.parameter name="_t5kdEPmiEeOThpOAvRBLhQ" org.eventb.core.comment="t" org.eventb.core.identifier="m"/>
<org.eventb.core.guard name="_PYW49PbuEeO4df-BGI_I2g" org.eventb.core.label="grd502" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_PYW49fbuEeO4df-BGI_I2g" org.eventb.core.label="grd503" org.eventb.core.predicate="msg∈MESSAGES ∧ msg ∉ used_messages"/>
<org.eventb.core.guard name="_PYW49vbuEeO4df-BGI_I2g" org.eventb.core.comment="buffer is not full" org.eventb.core.label="grd504" org.eventb.core.predicate="card(queue_of_buffers(buf))&lt;MaxMsgNum_of_Buffers(buf)"/>
<org.eventb.core.guard name="_PYW49_buEeO4df-BGI_I2g" org.eventb.core.label="grd505" org.eventb.core.predicate="card(processes_waitingfor_buffers∼[{buf}])&gt;0"/>
<org.eventb.core.guard name="_t5kdEvmiEeOThpOAvRBLhQ" org.eventb.core.comment="∧ t∈ℕ" org.eventb.core.label="grd506" org.eventb.core.predicate="m∈MESSAGES"/>
<org.eventb.core.action name="_PYW4-PbuEeO4df-BGI_I2g" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_i6WzIPdVEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_buffers:∣(¬∃t,m·(t∈ℕ ∧ m∈MESSAGES ∧ (proc↦(WAITING_R↦t)↦m)↦buf∈processes_waitingfor_buffers'))" org.eventb.core.comment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∖ {(proc↦(WAITING_R↦t)↦m) ↦  buf}//" org.eventb.core.label="act502"/>
</org.eventb.core.event>
<org.eventb.core.event name="_PYW4-fbuEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="send_buffer_withfull">
<org.eventb.core.refinesEvent name="_PYW4-vbuEeO4df-BGI_I2g" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_PYW4-_buEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_PYW4_PbuEeO4df-BGI_I2g" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_PYW4_fbuEeO4df-BGI_I2g" org.eventb.core.label="grd503" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_PYW4_vbuEeO4df-BGI_I2g" org.eventb.core.label="grd502" org.eventb.core.predicate="msg∈MESSAGES ∧ msg ∉ used_messages"/>
<org.eventb.core.guard name="_PYW4__buEeO4df-BGI_I2g" org.eventb.core.comment="buffer is  full&#10;         @grd506 t∈ℕ " org.eventb.core.label="grd505" org.eventb.core.predicate="card(queue_of_buffers(buf))=MaxMsgNum_of_Buffers(buf)"/>
<org.eventb.core.action name="_PYW5APbuEeO4df-BGI_I2g" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_xSxDIPdVEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_buffers:∣(∃t·(t∈ℕ ∧ (current_process ↦ (WAITING_W↦t)↦msg)↦buf∈processes_waitingfor_buffers'))" org.eventb.core.comment="processes_waitingfor_buffers ≔  processes_waitingfor_buffers ∪ {(current_process ↦ (WAITING_W↦t)↦msg)↦buf}//" org.eventb.core.label="act502"/>
</org.eventb.core.event>
<org.eventb.core.event name="_dwYucPbuEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="receive_buffer">
<org.eventb.core.parameter name="_dwYucfbuEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_dwYucvbuEeO4df-BGI_I2g" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_dwYuc_buEeO4df-BGI_I2g" org.eventb.core.label="grd01" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_dwYudPbuEeO4df-BGI_I2g" org.eventb.core.label="grd02" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.guard name="_dwYudfbuEeO4df-BGI_I2g" org.eventb.core.comment="buffer is not empty&#10;         @grd04 t∈ℕ " org.eventb.core.label="grd03" org.eventb.core.predicate="card(queue_of_buffers(buf))&gt;0"/>
<org.eventb.core.action name="_dwYudvbuEeO4df-BGI_I2g" org.eventb.core.assignment="queue_of_buffers:∣(¬∃t·(t∈ℕ ∧ (msg↦t)∈queue_of_buffers'(buf)))" org.eventb.core.comment="queue_of_buffers(buf) ≔ queue_of_buffers(buf) ∖ {msg↦t}//" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_wrGPgPbvEeO4df-BGI_I2g" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="receive_buffer_needwakeupsendproc">
<org.eventb.core.refinesEvent name="_wrGPgfbvEeO4df-BGI_I2g" org.eventb.core.target="resource_become_available"/>
<org.eventb.core.parameter name="_wrGPgvbvEeO4df-BGI_I2g" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_wrGPg_bvEeO4df-BGI_I2g" org.eventb.core.identifier="msg"/>
<org.eventb.core.parameter name="_t5kdF_miEeOThpOAvRBLhQ" org.eventb.core.comment="t_" org.eventb.core.identifier="m"/>
<org.eventb.core.guard name="_wrGPhPbvEeO4df-BGI_I2g" org.eventb.core.label="grd506" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_wrGPhfbvEeO4df-BGI_I2g" org.eventb.core.label="grd502" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.guard name="_wrGPhvbvEeO4df-BGI_I2g" org.eventb.core.comment="buffer is not empty" org.eventb.core.label="grd503" org.eventb.core.predicate="card(queue_of_buffers(buf))&gt;0"/>
<org.eventb.core.guard name="_wrGPiPbvEeO4df-BGI_I2g" org.eventb.core.label="grd505" org.eventb.core.predicate="card(processes_waitingfor_buffers∼[{buf}])&gt;0"/>
<org.eventb.core.guard name="_t5kdGfmiEeOThpOAvRBLhQ" org.eventb.core.comment="∧ t_∈ℕ" org.eventb.core.label="grd507" org.eventb.core.predicate="m∈MESSAGES"/>
<org.eventb.core.action name="_wrPZcPbvEeO4df-BGI_I2g" org.eventb.core.assignment="queue_of_buffers:∣(¬∃t·(t∈ℕ ∧  msg↦t∈queue_of_buffers'(buf)))" org.eventb.core.comment="queue_of_buffers(buf) ≔ queue_of_buffers(buf)∪{m↦t_}//" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_wrPZcfbvEeO4df-BGI_I2g" org.eventb.core.assignment="processes_waitingfor_buffers:∣(¬∃t,m·(t∈ℕ ∧ m∈MESSAGES∧(proc↦(WAITING_W↦t)↦m)↦buf∈processes_waitingfor_buffers))" org.eventb.core.comment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∖ {(proc↦(WAITING_W↦t_)↦m) ↦  buf}//" org.eventb.core.label="act502"/>
</org.eventb.core.event>
<org.eventb.core.event name="_68GQsPdcEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="receive_buffer_whenempty">
<org.eventb.core.refinesEvent name="_68GQsfdcEeOkQpPDjalEqQ" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_68GQsvdcEeOkQpPDjalEqQ" org.eventb.core.identifier="buf"/>
<org.eventb.core.parameter name="_t5kdGvmiEeOThpOAvRBLhQ" org.eventb.core.comment="t" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_68GQtPdcEeOkQpPDjalEqQ" org.eventb.core.label="grd504" org.eventb.core.predicate="buf ∈ buffers"/>
<org.eventb.core.guard name="_68GQtfdcEeOkQpPDjalEqQ" org.eventb.core.comment="buffer is empty" org.eventb.core.label="grd502" org.eventb.core.predicate="card(queue_of_buffers(buf))=0"/>
<org.eventb.core.guard name="_t5kdHPmiEeOThpOAvRBLhQ" org.eventb.core.comment="@grd505 t∈ℕ" org.eventb.core.label="grd503" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.action name="_68GQt_dcEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_buffers:∣(∃t,m·(t∈ℕ ∧m∈MESSAGES∧ (current_process ↦ (WAITING_R↦t)↦m)↦buf∈processes_waitingfor_buffers'))" org.eventb.core.comment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ∪ {(current_process ↦(WAITING_R↦t)↦msg) ↦ buf}//" org.eventb.core.label="act501"/>
</org.eventb.core.event>
<org.eventb.core.event name="_kXNSAPddEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_blackboard">
<org.eventb.core.parameter name="_kXNSAfddEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.guard name="_kXNSAvddEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="bb∈BLACKBOARDS ∧ bb∉blackboards"/>
<org.eventb.core.action name="_kXNSA_ddEeOkQpPDjalEqQ" org.eventb.core.assignment="blackboards ≔ blackboards∪{bb}" org.eventb.core.comment="blackboards:∣bb∈blackboards" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_qvD9NPdjEeOkQpPDjalEqQ" org.eventb.core.assignment="emptyindicator_of_blackboards(bb)≔BB_EMPTY" org.eventb.core.label="act04"/>
<org.eventb.core.action name="_ZN_x0PniEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards_of_partition(bb)≔ current_partition" org.eventb.core.label="act03"/>
</org.eventb.core.event>
<org.eventb.core.event name="_kXNSBPddEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="display_blackboard">
<org.eventb.core.parameter name="_kXNSBfddEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.parameter name="_kXNSBvddEeOkQpPDjalEqQ" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_kXNSB_ddEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="bb∈blackboards"/>
<org.eventb.core.guard name="_kXNSCPddEeOkQpPDjalEqQ" org.eventb.core.label="grd02" org.eventb.core.predicate="msg∈MESSAGES ∧ msg∉used_messages"/>
<org.eventb.core.guard name="_kXNSCfddEeOkQpPDjalEqQ" org.eventb.core.label="grd03" org.eventb.core.predicate="processes_waitingfor_blackboards∼[{bb}] = ∅"/>
<org.eventb.core.action name="_kXNSCvddEeOkQpPDjalEqQ" org.eventb.core.assignment="msgspace_of_blackboards(bb) ≔ msg" org.eventb.core.comment="msgspace_of_blackboards :∣ msgspace_of_blackboards'(bb) = msg" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_kXNSC_ddEeOkQpPDjalEqQ" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act02"/>
<org.eventb.core.action name="_OgmY0PdiEeOkQpPDjalEqQ" org.eventb.core.assignment="emptyindicator_of_blackboards(bb) ≔ BB_OCCUPIED" org.eventb.core.label="act03"/>
</org.eventb.core.event>
<org.eventb.core.event name="_C13z4PdeEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="display_blackboard_needwakeuprdprocs">
<org.eventb.core.refinesEvent name="_C13z4fdeEeOkQpPDjalEqQ" org.eventb.core.target="resource_become_available2"/>
<org.eventb.core.parameter name="_C13z4vdeEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.parameter name="_C13z4_deEeOkQpPDjalEqQ" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_C13z5PdeEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="bb∈blackboards"/>
<org.eventb.core.guard name="_C13z5fdeEeOkQpPDjalEqQ" org.eventb.core.label="grd504" org.eventb.core.predicate="msg∈MESSAGES ∧ msg∉used_messages"/>
<org.eventb.core.guard name="_C13z5vdeEeOkQpPDjalEqQ" org.eventb.core.label="grd505" org.eventb.core.predicate="processes_waitingfor_blackboards∼[{bb}] ≠ ∅"/>
<org.eventb.core.action name="_C13z5_deEeOkQpPDjalEqQ" org.eventb.core.assignment="msgspace_of_blackboards(bb) ≔ msg" org.eventb.core.comment="msgspace_of_blackboards :∣ msgspace_of_blackboards'(bb) = msg" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_C13z6PdeEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ procs⩤processes_waitingfor_blackboards" org.eventb.core.comment="processes_waitingfor_blackboards :∣ ∀p·(p∈procs⇒p↦bb∉processes_waitingfor_blackboards')" org.eventb.core.label="act502"/>
<org.eventb.core.action name="_C13z6fdeEeOkQpPDjalEqQ" org.eventb.core.assignment="used_messages ≔ used_messages ∪ {msg}" org.eventb.core.comment="used_messages :∣ msg∈used_messages'" org.eventb.core.label="act504"/>
<org.eventb.core.action name="_OgmY0fdiEeOkQpPDjalEqQ" org.eventb.core.assignment="emptyindicator_of_blackboards(bb) ≔ BB_OCCUPIED" org.eventb.core.label="act503"/>
</org.eventb.core.event>
<org.eventb.core.event name="_VSBmIPdeEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="read_blackboard">
<org.eventb.core.parameter name="_VSBmIfdeEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.parameter name="_VSBmIvdeEeOkQpPDjalEqQ" org.eventb.core.identifier="msg"/>
<org.eventb.core.guard name="_VSBmI_deEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="bb∈blackboards"/>
<org.eventb.core.guard name="_VSBmJPdeEeOkQpPDjalEqQ" org.eventb.core.label="grd02" org.eventb.core.predicate="msg∈MESSAGES"/>
<org.eventb.core.guard name="_VSBmJfdeEeOkQpPDjalEqQ" org.eventb.core.label="grd03" org.eventb.core.predicate="emptyindicator_of_blackboards(bb) = BB_OCCUPIED"/>
</org.eventb.core.event>
<org.eventb.core.event name="_VSBmJvdeEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="read_blackboard_whenempty">
<org.eventb.core.refinesEvent name="_VSBmJ_deEeOkQpPDjalEqQ" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_VSBmKPdeEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.guard name="_VSBmKfdeEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="bb∈blackboards"/>
<org.eventb.core.guard name="_VSBmKvdeEeOkQpPDjalEqQ" org.eventb.core.label="grd502" org.eventb.core.predicate="emptyindicator_of_blackboards(bb) = BB_EMPTY"/>
<org.eventb.core.action name="_VSBmK_deEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ∪ {current_process ↦ bb}" org.eventb.core.comment="processes_waitingfor_blackboards:∣ current_process ↦ bb∈processes_waitingfor_blackboards'" org.eventb.core.label="act501"/>
</org.eventb.core.event>
<org.eventb.core.event name="_bCRtgPdeEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="clear_blackboard">
<org.eventb.core.parameter name="_bCRtgfdeEeOkQpPDjalEqQ" org.eventb.core.identifier="bb"/>
<org.eventb.core.guard name="_bCRtgvdeEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="bb∈blackboards"/>
<org.eventb.core.action name="_bCRtg_deEeOkQpPDjalEqQ" org.eventb.core.assignment="emptyindicator_of_blackboards(bb) ≔ BB_EMPTY" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_EQ380PdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_semaphore">
<org.eventb.core.parameter name="_EQ380fdfEeOkQpPDjalEqQ" org.eventb.core.identifier="sem"/>
<org.eventb.core.parameter name="_qvNHIPdjEeOkQpPDjalEqQ" org.eventb.core.identifier="maxval"/>
<org.eventb.core.parameter name="_qvNHIfdjEeOkQpPDjalEqQ" org.eventb.core.identifier="currentval"/>
<org.eventb.core.guard name="_EQ380vdfEeOkQpPDjalEqQ" org.eventb.core.label="grd01" org.eventb.core.predicate="sem∈SEMAPHORES ∧ sem∉semaphores"/>
<org.eventb.core.guard name="_qvNHIvdjEeOkQpPDjalEqQ" org.eventb.core.label="grd07" org.eventb.core.predicate="maxval∈ℕ1"/>
<org.eventb.core.guard name="_qvNHI_djEeOkQpPDjalEqQ" org.eventb.core.label="grd08" org.eventb.core.predicate="currentval∈ℕ ∧ currentval≤maxval"/>
<org.eventb.core.action name="_EQ380_dfEeOkQpPDjalEqQ" org.eventb.core.assignment="semaphores ≔ semaphores∪{sem}" org.eventb.core.comment="semaphores :∣ sem∈semaphores'" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_qvNHJPdjEeOkQpPDjalEqQ" org.eventb.core.assignment="value_of_semaphores(sem)≔currentval" org.eventb.core.label="act03"/>
<org.eventb.core.action name="_qvNHJfdjEeOkQpPDjalEqQ" org.eventb.core.assignment="MaxValue_of_Semaphores(sem)≔maxval" org.eventb.core.label="act04"/>
<org.eventb.core.action name="_ZOI7wPniEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores_of_partition(sem) ≔current_partition" org.eventb.core.label="act05"/>
</org.eventb.core.event>
<org.eventb.core.event name="_EQ381PdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="wait_semaphore">
<org.eventb.core.parameter name="_EQ381fdfEeOkQpPDjalEqQ" org.eventb.core.identifier="sem"/>
<org.eventb.core.guard name="_EQ381vdfEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="sem∈semaphores"/>
<org.eventb.core.guard name="_EQ381_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd02" org.eventb.core.predicate="value_of_semaphores(sem) &gt; 0"/>
<org.eventb.core.action name="_EQ382PdfEeOkQpPDjalEqQ" org.eventb.core.assignment="value_of_semaphores(sem) ≔ value_of_semaphores(sem) −1" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_EQ382fdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="wait_semahpore_whenzero">
<org.eventb.core.refinesEvent name="_EQ382vdfEeOkQpPDjalEqQ" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_EQ382_dfEeOkQpPDjalEqQ" org.eventb.core.comment="t" org.eventb.core.identifier="sem"/>
<org.eventb.core.guard name="_EQ383PdfEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="sem∈semaphores"/>
<org.eventb.core.guard name="_EQ383fdfEeOkQpPDjalEqQ" org.eventb.core.comment="@grd501 t∈ℕ" org.eventb.core.label="grd504" org.eventb.core.predicate="value_of_semaphores(sem) = 0"/>
<org.eventb.core.action name="_EQ383vdfEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_semaphores :∣ (∃t·(t∈ℕ ∧ (current_process ↦ t)↦sem∈processes_waitingfor_semaphores'))" org.eventb.core.comment="processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ∪ {(current_process ↦ t)↦ sem}//" org.eventb.core.label="act501"/>
</org.eventb.core.event>
<org.eventb.core.event name="_WGTtUPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="signal_semaphore">
<org.eventb.core.parameter name="_WGTtUfdfEeOkQpPDjalEqQ" org.eventb.core.identifier="sem"/>
<org.eventb.core.guard name="_WGTtUvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="sem∈semaphores"/>
<org.eventb.core.guard name="_WGTtU_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd02" org.eventb.core.predicate="value_of_semaphores(sem) ≠ MaxValue_of_Semaphores(sem)"/>
<org.eventb.core.guard name="_WGTtVPdfEeOkQpPDjalEqQ" org.eventb.core.label="grd03" org.eventb.core.predicate="processes_waitingfor_semaphores∼[{sem}] = ∅"/>
<org.eventb.core.action name="_WGTtVfdfEeOkQpPDjalEqQ" org.eventb.core.assignment="value_of_semaphores(sem) ≔ value_of_semaphores(sem) + 1" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_WGTtVvdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="signal_semaphore_needwakeupproc">
<org.eventb.core.refinesEvent name="_WGTtV_dfEeOkQpPDjalEqQ" org.eventb.core.target="resource_become_available"/>
<org.eventb.core.parameter name="_WGTtWPdfEeOkQpPDjalEqQ" org.eventb.core.comment="t" org.eventb.core.identifier="sem"/>
<org.eventb.core.guard name="_WGTtWvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="sem∈semaphores"/>
<org.eventb.core.guard name="_WGTtW_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd503" org.eventb.core.predicate="value_of_semaphores(sem) ≠ MaxValue_of_Semaphores(sem)"/>
<org.eventb.core.guard name="_WGTtXPdfEeOkQpPDjalEqQ" org.eventb.core.comment="@grd504 t∈ℕ" org.eventb.core.label="grd506" org.eventb.core.predicate="card(processes_waitingfor_semaphores∼[{sem}])&gt;0"/>
<org.eventb.core.action name="_WGTtXfdfEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_semaphores :∣ (¬∃t·(t∈ℕ ∧  proc ↦ t↦sem∈processes_waitingfor_semaphores'))" org.eventb.core.comment="processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ∖ {proc ↦ t↦sem}//" org.eventb.core.label="act501"/>
</org.eventb.core.event>
<org.eventb.core.event name="_iEmrUPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="create_event">
<org.eventb.core.parameter name="_iEmrUfdfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_iEmrUvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd01" org.eventb.core.predicate="ev∈EVENTS ∧ ev ∉ events_"/>
<org.eventb.core.action name="_iEmrU_dfEeOkQpPDjalEqQ" org.eventb.core.assignment="events_ ≔ events_∪{ev}" org.eventb.core.label="act01"/>
<org.eventb.core.action name="_qvNHJvdjEeOkQpPDjalEqQ" org.eventb.core.assignment="state_of_events(ev) ≔ EVENT_DOWN" org.eventb.core.label="act02"/>
<org.eventb.core.action name="_ZOI7wfniEeOsF7H-KIoPcA" org.eventb.core.assignment="events_of_partition(ev) ≔ current_partition" org.eventb.core.label="act03"/>
</org.eventb.core.event>
<org.eventb.core.event name="_iEmrVPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="set_event">
<org.eventb.core.parameter name="_iEmrVfdfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_iEmrVvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="ev∈events_"/>
<org.eventb.core.guard name="_iEmrV_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd03" org.eventb.core.predicate="processes_waitingfor_events∼[{ev}] = ∅"/>
<org.eventb.core.action name="_iEmrWPdfEeOkQpPDjalEqQ" org.eventb.core.assignment="state_of_events(ev)≔EVENT_UP" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_iEmrWfdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_event_needwakeupprocs">
<org.eventb.core.refinesEvent name="_iEmrWvdfEeOkQpPDjalEqQ" org.eventb.core.target="resource_become_available2"/>
<org.eventb.core.parameter name="_iEmrW_dfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_iEmrXPdfEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="ev∈events_"/>
<org.eventb.core.guard name="_iEmrXfdfEeOkQpPDjalEqQ" org.eventb.core.label="grd503" org.eventb.core.predicate="processes_waitingfor_events∼[{ev}] ≠ ∅"/>
<org.eventb.core.action name="_iEmrXvdfEeOkQpPDjalEqQ" org.eventb.core.assignment="state_of_events(ev)≔EVENT_UP" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_iEmrX_dfEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_events ≔ procs⩤processes_waitingfor_events" org.eventb.core.comment="processes_waitingfor_events :∣ ∀p·(p∈procs⇒p↦ev∉processes_waitingfor_events')" org.eventb.core.label="act503"/>
</org.eventb.core.event>
<org.eventb.core.event name="_9AlJkPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="reset_event">
<org.eventb.core.parameter name="_9AlJkfdfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_9AlJkvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="ev∈events_"/>
<org.eventb.core.action name="_9AlJk_dfEeOkQpPDjalEqQ" org.eventb.core.assignment="state_of_events(ev)≔EVENT_DOWN" org.eventb.core.label="act01"/>
</org.eventb.core.event>
<org.eventb.core.event name="_9AlJlPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="wait_event">
<org.eventb.core.parameter name="_9AlJlfdfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_9AlJlvdfEeOkQpPDjalEqQ" org.eventb.core.label="grd00" org.eventb.core.predicate="ev∈events_"/>
<org.eventb.core.guard name="_9AlJl_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd02" org.eventb.core.predicate="state_of_events(ev)=EVENT_UP"/>
</org.eventb.core.event>
<org.eventb.core.event name="_9AlJmPdfEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="wait_event_whendown">
<org.eventb.core.refinesEvent name="_9AlJmfdfEeOkQpPDjalEqQ" org.eventb.core.target="req_busy_resource"/>
<org.eventb.core.parameter name="_9AlJmvdfEeOkQpPDjalEqQ" org.eventb.core.identifier="ev"/>
<org.eventb.core.guard name="_9AlJm_dfEeOkQpPDjalEqQ" org.eventb.core.label="grd500" org.eventb.core.predicate="ev∈events_"/>
<org.eventb.core.guard name="_9AlJnPdfEeOkQpPDjalEqQ" org.eventb.core.label="grd504" org.eventb.core.predicate="state_of_events(ev)=EVENT_DOWN"/>
<org.eventb.core.action name="_9AlJnfdfEeOkQpPDjalEqQ" org.eventb.core.assignment="processes_waitingfor_events ≔ processes_waitingfor_events ∪ {current_process ↦ ev}" org.eventb.core.comment="processes_waitingfor_events:∣ current_process ↦ ev ∈ processes_waitingfor_events'" org.eventb.core.label="act501"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pwPdgEeOkQpPDjalEqQ" org.eventb.core.comment="timer interrupt event, triggered by the timer in hardware. one tick in each ONE_TICK_TIME" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="ticktock">
<org.eventb.core.refinesEvent name="_p70pwfdgEeOkQpPDjalEqQ" org.eventb.core.target="ticktock"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pwvdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="partition_schedule">
<org.eventb.core.refinesEvent name="_p70pw_dgEeOkQpPDjalEqQ" org.eventb.core.target="partition_schedule"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pxPdgEeOkQpPDjalEqQ" org.eventb.core.comment="if there is not error handler and preempter in this partition" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="process_schedule">
<org.eventb.core.refinesEvent name="_p70pxfdgEeOkQpPDjalEqQ" org.eventb.core.target="process_schedule"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pxvdgEeOkQpPDjalEqQ" org.eventb.core.comment="if there is the error handler, it is executed, otherwise the preempter is executed" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="run_errorhandler_preempter">
<org.eventb.core.refinesEvent name="_p70px_dgEeOkQpPDjalEqQ" org.eventb.core.target="run_errorhandler_preempter"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pyPdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="get_partition_status">
<org.eventb.core.refinesEvent name="_p70pyfdgEeOkQpPDjalEqQ" org.eventb.core.target="get_partition_status"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pyvdgEeOkQpPDjalEqQ" org.eventb.core.comment="shutdown the partition" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_partition_mode_to_idle">
<org.eventb.core.refinesEvent name="_p70py_dgEeOkQpPDjalEqQ" org.eventb.core.target="set_partition_mode_to_idle"/>
<org.eventb.core.action name="_XTtE0PnhEeOsF7H-KIoPcA" org.eventb.core.assignment="ports ≔ ports∖Ports_of_Partition∼[{part}]" org.eventb.core.comment="@act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_XTtE0vnhEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports" org.eventb.core.comment="@act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport" org.eventb.core.label="act503"/>
<org.eventb.core.action name="_XTtE1PnhEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports" org.eventb.core.comment="@act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports" org.eventb.core.label="act505"/>
<org.eventb.core.action name="_XTtE0fnhEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]" org.eventb.core.label="act507"/>
<org.eventb.core.action name="_aRsOAPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers ≔ buffers∖buffers_of_partition∼[{part}]" org.eventb.core.label="act508"/>
<org.eventb.core.action name="_aRsOAfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]" org.eventb.core.label="act509"/>
<org.eventb.core.action name="_aRsOAvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]" org.eventb.core.label="act510"/>
<org.eventb.core.action name="_aRsOA_njEeOsF7H-KIoPcA" org.eventb.core.assignment="events_ ≔ events_∖events_of_partition∼[{part}]" org.eventb.core.label="act511"/>
<org.eventb.core.action name="_aRsOBPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers_of_partition ≔ buffers_of_partition⩥{part}" org.eventb.core.label="act512"/>
<org.eventb.core.action name="_aRsOBfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards_of_partition ≔ blackboards_of_partition⩥{part}" org.eventb.core.label="act513"/>
<org.eventb.core.action name="_aRsOBvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores_of_partition ≔ semaphores_of_partition⩥{part}" org.eventb.core.label="act514"/>
<org.eventb.core.action name="_aRsOB_njEeOsF7H-KIoPcA" org.eventb.core.assignment="events_of_partition ≔ events_of_partition⩥{part}" org.eventb.core.label="act515"/>
<org.eventb.core.action name="_aRsOCPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers" org.eventb.core.label="act516"/>
<org.eventb.core.action name="_aRsOCfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers" org.eventb.core.label="act517"/>
<org.eventb.core.action name="_ohlbMPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}]" org.eventb.core.comment="@act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers" org.eventb.core.label="act518"/>
<org.eventb.core.action name="_aRsOC_njEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards" org.eventb.core.label="act520"/>
<org.eventb.core.action name="_aRsODPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards" org.eventb.core.label="act521"/>
<org.eventb.core.action name="_aRsODfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]" org.eventb.core.label="act522"/>
<org.eventb.core.action name="_aRsODvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores" org.eventb.core.label="act523"/>
<org.eventb.core.action name="_ohulIPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores" org.eventb.core.comment="@act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores" org.eventb.core.label="act524"/>
<org.eventb.core.action name="_aRsOEPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]" org.eventb.core.label="act526"/>
<org.eventb.core.action name="_aRsOEfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events" org.eventb.core.label="act527"/>
<org.eventb.core.action name="_aRsOEvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]" org.eventb.core.label="act528"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pzPdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_partition_mode_to_normal">
<org.eventb.core.refinesEvent name="_p70pzfdgEeOkQpPDjalEqQ" org.eventb.core.target="set_partition_mode_to_normal"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70pzvdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_partition_mode_to_coldstart">
<org.eventb.core.refinesEvent name="_AFM0QPgoEeOdqO0geQOt0A" org.eventb.core.target="set_partition_mode_to_coldstart"/>
<org.eventb.core.action name="_chDI4PngEeOsF7H-KIoPcA" org.eventb.core.assignment="ports ≔ ports∖Ports_of_Partition∼[{part}]" org.eventb.core.comment="@act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_XTtE1vnhEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports" org.eventb.core.comment="@act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport" org.eventb.core.label="act503"/>
<org.eventb.core.action name="_XTtE2PnhEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports" org.eventb.core.comment="@act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports" org.eventb.core.label="act505"/>
<org.eventb.core.action name="_XTtE1fnhEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]" org.eventb.core.label="act507"/>
<org.eventb.core.action name="_aRsOE_njEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers ≔ buffers∖buffers_of_partition∼[{part}]" org.eventb.core.label="act508"/>
<org.eventb.core.action name="_aRsOFPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]" org.eventb.core.label="act509"/>
<org.eventb.core.action name="_aRsOFfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]" org.eventb.core.label="act510"/>
<org.eventb.core.action name="_aRsOFvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="events_ ≔ events_∖events_of_partition∼[{part}]" org.eventb.core.label="act511"/>
<org.eventb.core.action name="_aRsOF_njEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers_of_partition ≔ buffers_of_partition⩥{part}" org.eventb.core.label="act512"/>
<org.eventb.core.action name="_aRsOGPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards_of_partition ≔ blackboards_of_partition⩥{part}" org.eventb.core.label="act513"/>
<org.eventb.core.action name="_aRsOGfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores_of_partition ≔ semaphores_of_partition⩥{part}" org.eventb.core.label="act514"/>
<org.eventb.core.action name="_aRsOGvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="events_of_partition ≔ events_of_partition⩥{part}" org.eventb.core.label="act515"/>
<org.eventb.core.action name="_aRsOG_njEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers" org.eventb.core.label="act516"/>
<org.eventb.core.action name="_aRsOHPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers" org.eventb.core.label="act517"/>
<org.eventb.core.action name="_aRsOHfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}]" org.eventb.core.comment="@act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers" org.eventb.core.label="act518"/>
<org.eventb.core.action name="_aRsOHvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards" org.eventb.core.label="act520"/>
<org.eventb.core.action name="_aRsOH_njEeOsF7H-KIoPcA" org.eventb.core.assignment="emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards" org.eventb.core.label="act521"/>
<org.eventb.core.action name="_aRsOIPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]" org.eventb.core.label="act522"/>
<org.eventb.core.action name="_aRsOIfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores" org.eventb.core.label="act523"/>
<org.eventb.core.action name="_aRsOIvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores" org.eventb.core.comment="@act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores" org.eventb.core.label="act524"/>
<org.eventb.core.action name="_aRsOI_njEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]" org.eventb.core.label="act526"/>
<org.eventb.core.action name="_aRsOJPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events" org.eventb.core.label="act527"/>
<org.eventb.core.action name="_aRsOJfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]" org.eventb.core.label="act528"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p0PdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_partition_mode_to_warmstart">
<org.eventb.core.refinesEvent name="_AFM0QfgoEeOdqO0geQOt0A" org.eventb.core.target="set_partition_mode_to_warmstart"/>
<org.eventb.core.action name="_XTtE2fnhEeOsF7H-KIoPcA" org.eventb.core.assignment="ports ≔ ports∖Ports_of_Partition∼[{part}]" org.eventb.core.comment="@act602 RefreshPeriod_of_SamplingPorts ≔ Ports_of_Partition∼[{part}] ⩤ RefreshPeriod_of_SamplingPorts" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_XTtE2_nhEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_samplingports ≔  Ports_of_Partition∼[{part}] ⩤ msgspace_of_samplingports" org.eventb.core.comment="@act604 needtrans_of_sourcesamplingport ≔  Ports_of_Partition∼[{part}] ⩤ needtrans_of_sourcesamplingport" org.eventb.core.label="act503"/>
<org.eventb.core.action name="_XTtE3fnhEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ queue_of_queueingports" org.eventb.core.comment="@act606 quediscipline_of_queueingports ≔ Ports_of_Partition∼[{part}] ⩤ quediscipline_of_queueingports" org.eventb.core.label="act505"/>
<org.eventb.core.action name="_aR1YD_njEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_queuingports ≔ processes_waitingfor_queuingports⩥Ports_of_Partition∼[{part}]" org.eventb.core.label="act507"/>
<org.eventb.core.action name="_aR1YEPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers ≔ buffers∖buffers_of_partition∼[{part}]" org.eventb.core.label="act508"/>
<org.eventb.core.action name="_aR1YEfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards ≔ blackboards∖blackboards_of_partition∼[{part}]" org.eventb.core.label="act509"/>
<org.eventb.core.action name="_aR1YEvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores ≔ semaphores∖semaphores_of_partition∼[{part}]" org.eventb.core.label="act510"/>
<org.eventb.core.action name="_aR1YE_njEeOsF7H-KIoPcA" org.eventb.core.assignment="events_ ≔ events_∖events_of_partition∼[{part}]" org.eventb.core.label="act511"/>
<org.eventb.core.action name="_aR1YFPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="buffers_of_partition ≔ buffers_of_partition⩥{part}" org.eventb.core.label="act512"/>
<org.eventb.core.action name="_aR1YFfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="blackboards_of_partition ≔ blackboards_of_partition⩥{part}" org.eventb.core.label="act513"/>
<org.eventb.core.action name="_aR1YFvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="semaphores_of_partition ≔ semaphores_of_partition⩥{part}" org.eventb.core.label="act514"/>
<org.eventb.core.action name="_aR1YF_njEeOsF7H-KIoPcA" org.eventb.core.assignment="events_of_partition ≔ events_of_partition⩥{part}" org.eventb.core.label="act515"/>
<org.eventb.core.action name="_aR1YGPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxMsgNum_of_Buffers ≔ buffers_of_partition∼[{part}] ⩤ MaxMsgNum_of_Buffers" org.eventb.core.label="act516"/>
<org.eventb.core.action name="_aR1YGfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="queue_of_buffers ≔ buffers_of_partition∼[{part}]⩤  queue_of_buffers" org.eventb.core.label="act517"/>
<org.eventb.core.action name="_aR1YGvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_buffers ≔ processes_waitingfor_buffers ⩥ buffers_of_partition∼[{part}]" org.eventb.core.comment="@act619 quediscipline_of_buffers ≔ buffers_of_partition∼[{part}]⩤quediscipline_of_buffers" org.eventb.core.label="act518"/>
<org.eventb.core.action name="_aR1YG_njEeOsF7H-KIoPcA" org.eventb.core.assignment="msgspace_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ msgspace_of_blackboards" org.eventb.core.label="act520"/>
<org.eventb.core.action name="_aR1YHPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="emptyindicator_of_blackboards ≔ blackboards_of_partition∼[{part}] ⩤ emptyindicator_of_blackboards" org.eventb.core.label="act521"/>
<org.eventb.core.action name="_aR1YHfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ processes_waitingfor_blackboards ⩥ blackboards_of_partition∼[{part}]" org.eventb.core.label="act522"/>
<org.eventb.core.action name="_aR1YHvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="MaxValue_of_Semaphores ≔ semaphores_of_partition∼[{part}] ⩤ MaxValue_of_Semaphores" org.eventb.core.label="act523"/>
<org.eventb.core.action name="_aR1YH_njEeOsF7H-KIoPcA" org.eventb.core.assignment="value_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ value_of_semaphores" org.eventb.core.comment="@act625 quediscipline_of_semaphores ≔ semaphores_of_partition∼[{part}] ⩤ quediscipline_of_semaphores" org.eventb.core.label="act524"/>
<org.eventb.core.action name="_aR1YIPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_semaphores ≔ processes_waitingfor_semaphores ⩥ semaphores_of_partition∼[{part}]" org.eventb.core.label="act526"/>
<org.eventb.core.action name="_aR1YIfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="state_of_events ≔ events_of_partition∼[{part}] ⩤ state_of_events" org.eventb.core.label="act527"/>
<org.eventb.core.action name="_aR1YIvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_events ≔ processes_waitingfor_events ⩥ events_of_partition∼[{part}]" org.eventb.core.label="act528"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p0vdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="get_process_id">
<org.eventb.core.refinesEvent name="_p70p0_dgEeOkQpPDjalEqQ" org.eventb.core.target="get_process_id"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p1PdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="get_process_status">
<org.eventb.core.refinesEvent name="_p70p1fdgEeOkQpPDjalEqQ" org.eventb.core.target="get_process_status"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p1vdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="create_process">
<org.eventb.core.refinesEvent name="_p70p1_dgEeOkQpPDjalEqQ" org.eventb.core.target="create_process"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p2PdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="set_priority">
<org.eventb.core.refinesEvent name="_p70p2fdgEeOkQpPDjalEqQ" org.eventb.core.target="set_priority"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p2vdgEeOkQpPDjalEqQ" org.eventb.core.comment="extends suspend_self&#10;     any timeout timeouttrig waittype " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="suspend_self">
<org.eventb.core.refinesEvent name="_p70p2_dgEeOkQpPDjalEqQ" org.eventb.core.target="suspend_self"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p3PdgEeOkQpPDjalEqQ" org.eventb.core.comment="extends suspend" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="suspend">
<org.eventb.core.refinesEvent name="_p70p3fdgEeOkQpPDjalEqQ" org.eventb.core.target="suspend"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p3vdgEeOkQpPDjalEqQ" org.eventb.core.comment="extends resume" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="resume">
<org.eventb.core.refinesEvent name="_p70p3_dgEeOkQpPDjalEqQ" org.eventb.core.target="resume"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p4PdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="stop_self">
<org.eventb.core.refinesEvent name="_p70p4fdgEeOkQpPDjalEqQ" org.eventb.core.target="stop_self"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p4vdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="stop">
<org.eventb.core.refinesEvent name="_p70p4_dgEeOkQpPDjalEqQ" org.eventb.core.target="stop"/>
<org.eventb.core.action name="_oh4WIPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_queuingports :∣∀p,t,m,pt·((p↦t↦m)↦pt∈processes_waitingfor_queuingports ⇒ (p=proc⇒(p↦t↦m)↦pt∉processes_waitingfor_queuingports')∧(p≠proc⇒(p↦t↦m)↦pt∈processes_waitingfor_queuingports'))" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_oh4WIfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_buffers :∣∀p,w,t,m,pt·((p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers ⇒ (p=proc⇒(p↦(w↦t)↦m)↦pt∉processes_waitingfor_buffers')∧(p≠proc⇒(p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers'))" org.eventb.core.label="act502"/>
<org.eventb.core.action name="_oh4WIvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ {proc}⩤processes_waitingfor_blackboards" org.eventb.core.label="act503"/>
<org.eventb.core.action name="_oh4WI_njEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_semaphores :∣∀p,t,pt·((p↦t)↦pt∈processes_waitingfor_semaphores ⇒ (p=proc⇒(p↦t)↦pt∉processes_waitingfor_semaphores')∧(p≠proc⇒(p↦t)↦pt∈processes_waitingfor_semaphores'))" org.eventb.core.label="act504"/>
<org.eventb.core.action name="_oh4WJPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_events ≔ {proc}⩤processes_waitingfor_events" org.eventb.core.label="act505"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p5PdgEeOkQpPDjalEqQ" org.eventb.core.comment="start an aperiodic process in COLD_START or WARM_START mode&#10;     extends start " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="start_aperiodprocess_instart">
<org.eventb.core.refinesEvent name="_0tOGADVJEeSxw-wt7-_VGQ" org.eventb.core.target="start_aperiodprocess_instart"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p5vdgEeOkQpPDjalEqQ" org.eventb.core.comment="start an aperiodic process in NORMAL mode&#10;     extends start " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="start_aperiodprocess_innormal">
<org.eventb.core.refinesEvent name="_0tOGATVJEeSxw-wt7-_VGQ" org.eventb.core.target="start_aperiodprocess_innormal"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p70p6PdgEeOkQpPDjalEqQ" org.eventb.core.comment="start a periodic process in COLD_START or WARM_START mode&#10;     extends start " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="start_periodprocess_instart">
<org.eventb.core.refinesEvent name="_I6JqAAdCEeSbLOdQCsVs6g" org.eventb.core.target="start_periodprocess_instart"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-awfdgEeOkQpPDjalEqQ" org.eventb.core.comment="start a periodic process in NORMAL mode&#10;     extends start " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="start_periodprocess_innormal">
<org.eventb.core.refinesEvent name="_AFWlQ_goEeOdqO0geQOt0A" org.eventb.core.target="start_periodprocess_innormal"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-aw_dgEeOkQpPDjalEqQ" org.eventb.core.comment="extends delayed_start" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="delaystart_aperiodprocess_instart">
<org.eventb.core.refinesEvent name="_bmnNsf3BEeOo5_6MhQdZkA" org.eventb.core.target="delaystart_aperiodprocess_instart"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-axfdgEeOkQpPDjalEqQ" org.eventb.core.comment="if delaytime=0, then immediately transit to READY, this is modelled in start_aperiod_process_whennormal&#10;     extends delayed_start&#10;     any delaytime " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="delaystart_aperiodprocess_innormal">
<org.eventb.core.refinesEvent name="_uulkIf3BEeOo5_6MhQdZkA" org.eventb.core.target="delaystart_aperiodprocess_innormal"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-ax_dgEeOkQpPDjalEqQ" org.eventb.core.comment="extends delayed_start" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="delaystart_periodprocess_instart">
<org.eventb.core.refinesEvent name="_I6JqAQdCEeSbLOdQCsVs6g" org.eventb.core.target="delaystart_periodprocess_instart"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-ayfdgEeOkQpPDjalEqQ" org.eventb.core.comment="extends delayed_start" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="delaystart_periodprocess_innormal">
<org.eventb.core.refinesEvent name="_AFWlR_goEeOdqO0geQOt0A" org.eventb.core.target="delaystart_periodprocess_innormal"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-ay_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="lock_preemption">
<org.eventb.core.refinesEvent name="_I6JqAgdCEeSbLOdQCsVs6g" org.eventb.core.target="lock_preemption"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-azfdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="unlock_preemption">
<org.eventb.core.refinesEvent name="_I6JqAwdCEeSbLOdQCsVs6g" org.eventb.core.target="unlock_preemption"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-az_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="get_my_id">
<org.eventb.core.refinesEvent name="_p7-a0PdgEeOkQpPDjalEqQ" org.eventb.core.target="get_my_id"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a0fdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="timed_wait">
<org.eventb.core.refinesEvent name="_p7-a0vdgEeOkQpPDjalEqQ" org.eventb.core.target="timed_wait"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a0_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="period_wait">
<org.eventb.core.refinesEvent name="_p7-a1PdgEeOkQpPDjalEqQ" org.eventb.core.target="period_wait"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a1fdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="get_time">
<org.eventb.core.refinesEvent name="_p7-a1vdgEeOkQpPDjalEqQ" org.eventb.core.target="get_time"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a1_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="replenish">
<org.eventb.core.refinesEvent name="_p7-a2PdgEeOkQpPDjalEqQ" org.eventb.core.target="replenish"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a2fdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="aperiodicprocess_finished">
<org.eventb.core.refinesEvent name="_p7-a2vdgEeOkQpPDjalEqQ" org.eventb.core.target="aperiodicprocess_finished"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a2_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="periodicprocess_finished">
<org.eventb.core.refinesEvent name="_p7-a3PdgEeOkQpPDjalEqQ" org.eventb.core.target="periodicprocess_finished"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a3fdgEeOkQpPDjalEqQ" org.eventb.core.comment="should refined to support remove process on waiting queue of comm resources" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="time_out">
<org.eventb.core.refinesEvent name="_p7-a3vdgEeOkQpPDjalEqQ" org.eventb.core.target="time_out"/>
<org.eventb.core.action name="_oh4WJfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_queuingports :∣∀p,t,m,pt·((p↦t↦m)↦pt∈processes_waitingfor_queuingports ⇒ (p=proc⇒(p↦t↦m)↦pt∉processes_waitingfor_queuingports')∧(p≠proc⇒(p↦t↦m)↦pt∈processes_waitingfor_queuingports'))" org.eventb.core.label="act501"/>
<org.eventb.core.action name="_oh4WJvnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_buffers :∣∀p,w,t,m,pt·((p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers ⇒ (p=proc⇒(p↦(w↦t)↦m)↦pt∉processes_waitingfor_buffers')∧(p≠proc⇒(p↦(w↦t)↦m)↦pt∈processes_waitingfor_buffers'))" org.eventb.core.label="act502"/>
<org.eventb.core.action name="_oh4WJ_njEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_blackboards ≔ {proc}⩤processes_waitingfor_blackboards" org.eventb.core.label="act503"/>
<org.eventb.core.action name="_oh4WKPnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_semaphores :∣∀p,t,pt·((p↦t)↦pt∈processes_waitingfor_semaphores ⇒ (p=proc⇒(p↦t)↦pt∉processes_waitingfor_semaphores')∧(p≠proc⇒(p↦t)↦pt∈processes_waitingfor_semaphores'))" org.eventb.core.label="act504"/>
<org.eventb.core.action name="_oh4WKfnjEeOsF7H-KIoPcA" org.eventb.core.assignment="processes_waitingfor_events ≔ {proc}⩤processes_waitingfor_events" org.eventb.core.label="act505"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a3_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="periodicproc_reach_releasepoint">
<org.eventb.core.refinesEvent name="_p7-a4PdgEeOkQpPDjalEqQ" org.eventb.core.target="periodicproc_reach_releasepoint"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a4fdgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="coldstart_partition_fromidle">
<org.eventb.core.refinesEvent name="_p7-a4vdgEeOkQpPDjalEqQ" org.eventb.core.target="coldstart_partition_fromidle"/>
</org.eventb.core.event>
<org.eventb.core.event name="_p7-a4_dgEeOkQpPDjalEqQ" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="warmstart_partition_fromidle">
<org.eventb.core.refinesEvent name="_p7-a5PdgEeOkQpPDjalEqQ" org.eventb.core.target="warmstart_partition_fromidle"/>
</org.eventb.core.event>
</org.eventb.core.machineFile>
